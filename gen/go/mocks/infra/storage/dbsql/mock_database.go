// Code generated by mockery v2.50.0. DO NOT EDIT.

package dbsql

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dbsql "github.com/webitel/webitel-wfm/infra/storage/dbsql"

	scanner "github.com/webitel/webitel-wfm/infra/storage/dbsql/scanner"

	sql "database/sql"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// Batch provides a mock function with no fields
func (_m *MockDatabase) Batch() dbsql.Batcher {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Batch")
	}

	var r0 dbsql.Batcher
	if rf, ok := ret.Get(0).(func() dbsql.Batcher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbsql.Batcher)
		}
	}

	return r0
}

// MockDatabase_Batch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Batch'
type MockDatabase_Batch_Call struct {
	*mock.Call
}

// Batch is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Batch() *MockDatabase_Batch_Call {
	return &MockDatabase_Batch_Call{Call: _e.mock.On("Batch")}
}

func (_c *MockDatabase_Batch_Call) Run(run func()) *MockDatabase_Batch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Batch_Call) Return(_a0 dbsql.Batcher) *MockDatabase_Batch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Batch_Call) RunAndReturn(run func() dbsql.Batcher) *MockDatabase_Batch_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockDatabase) Close() {
	_m.Called()
}

// MockDatabase_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDatabase_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Close() *MockDatabase_Close_Call {
	return &MockDatabase_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDatabase_Close_Call) Run(run func()) *MockDatabase_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Close_Call) Return() *MockDatabase_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDatabase_Close_Call) RunAndReturn(run func()) *MockDatabase_Close_Call {
	_c.Run(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, query, args
func (_m *MockDatabase) Exec(ctx context.Context, query string, args ...any) (int64, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _m.Called(ctx, query, args)
	} else {
		tmpRet = _m.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...any) (int64, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...any) int64); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockDatabase_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *MockDatabase_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *MockDatabase_Exec_Call {
	return &MockDatabase_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDatabase_Exec_Call) Run(run func(ctx context.Context, query string, args ...any)) *MockDatabase_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabase_Exec_Call) Return(_a0 int64, _a1 error) *MockDatabase_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Exec_Call) RunAndReturn(run func(context.Context, string, ...any) (int64, error)) *MockDatabase_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, query, args
func (_m *MockDatabase) Query(ctx context.Context, query string, args ...any) (scanner.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _m.Called(ctx, query, args)
	} else {
		tmpRet = _m.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 scanner.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...any) (scanner.Rows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...any) scanner.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scanner.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDatabase_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *MockDatabase_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *MockDatabase_Query_Call {
	return &MockDatabase_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDatabase_Query_Call) Run(run func(ctx context.Context, query string, args ...any)) *MockDatabase_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabase_Query_Call) Return(_a0 scanner.Rows, _a1 error) *MockDatabase_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Query_Call) RunAndReturn(run func(context.Context, string, ...any) (scanner.Rows, error)) *MockDatabase_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Stdlib provides a mock function with no fields
func (_m *MockDatabase) Stdlib() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stdlib")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// MockDatabase_Stdlib_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stdlib'
type MockDatabase_Stdlib_Call struct {
	*mock.Call
}

// Stdlib is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Stdlib() *MockDatabase_Stdlib_Call {
	return &MockDatabase_Stdlib_Call{Call: _e.mock.On("Stdlib")}
}

func (_c *MockDatabase_Stdlib_Call) Run(run func()) *MockDatabase_Stdlib_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Stdlib_Call) Return(_a0 *sql.DB) *MockDatabase_Stdlib_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Stdlib_Call) RunAndReturn(run func() *sql.DB) *MockDatabase_Stdlib_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
