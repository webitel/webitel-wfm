// Code generated by mockery v2.50.0. DO NOT EDIT.

package health

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	health "github.com/webitel/webitel-wfm/infra/health"
)

// MockCheck is an autogenerated mock type for the Check type
type MockCheck struct {
	mock.Mock
}

type MockCheck_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCheck) EXPECT() *MockCheck_Expecter {
	return &MockCheck_Expecter{mock: &_m.Mock}
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *MockCheck) HealthCheck(ctx context.Context) []health.CheckResult {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 []health.CheckResult
	if rf, ok := ret.Get(0).(func(context.Context) []health.CheckResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]health.CheckResult)
		}
	}

	return r0
}

// MockCheck_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockCheck_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCheck_Expecter) HealthCheck(ctx interface{}) *MockCheck_HealthCheck_Call {
	return &MockCheck_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx)}
}

func (_c *MockCheck_HealthCheck_Call) Run(run func(ctx context.Context)) *MockCheck_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCheck_HealthCheck_Call) Return(_a0 []health.CheckResult) *MockCheck_HealthCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCheck_HealthCheck_Call) RunAndReturn(run func(context.Context) []health.CheckResult) *MockCheck_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCheck creates a new instance of MockCheck. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCheck(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCheck {
	mock := &MockCheck{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
