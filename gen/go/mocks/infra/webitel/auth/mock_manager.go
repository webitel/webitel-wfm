// Code generated by mockery v2.50.0. DO NOT EDIT.

package auth

import (
	context "context"

	auth_manager "github.com/webitel/engine/auth_manager"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// GetSession provides a mock function with given fields: token
func (_m *MockManager) GetSession(token string) (*auth_manager.Session, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *auth_manager.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*auth_manager.Session, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *auth_manager.Session); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_manager.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type MockManager_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - token string
func (_e *MockManager_Expecter) GetSession(token interface{}) *MockManager_GetSession_Call {
	return &MockManager_GetSession_Call{Call: _e.mock.On("GetSession", token)}
}

func (_c *MockManager_GetSession_Call) Run(run func(token string)) *MockManager_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetSession_Call) Return(_a0 *auth_manager.Session, _a1 error) *MockManager_GetSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetSession_Call) RunAndReturn(run func(string) (*auth_manager.Session, error)) *MockManager_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// ProductLimit provides a mock function with given fields: ctx, token, productName
func (_m *MockManager) ProductLimit(ctx context.Context, token string, productName string) (int, error) {
	ret := _m.Called(ctx, token, productName)

	if len(ret) == 0 {
		panic("no return value specified for ProductLimit")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int, error)); ok {
		return rf(ctx, token, productName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, token, productName)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, productName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_ProductLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProductLimit'
type MockManager_ProductLimit_Call struct {
	*mock.Call
}

// ProductLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - productName string
func (_e *MockManager_Expecter) ProductLimit(ctx interface{}, token interface{}, productName interface{}) *MockManager_ProductLimit_Call {
	return &MockManager_ProductLimit_Call{Call: _e.mock.On("ProductLimit", ctx, token, productName)}
}

func (_c *MockManager_ProductLimit_Call) Run(run func(ctx context.Context, token string, productName string)) *MockManager_ProductLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockManager_ProductLimit_Call) Return(_a0 int, _a1 error) *MockManager_ProductLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_ProductLimit_Call) RunAndReturn(run func(context.Context, string, string) (int, error)) *MockManager_ProductLimit_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockManager) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockManager_Expecter) Start() *MockManager_Start_Call {
	return &MockManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockManager_Start_Call) Run(run func()) *MockManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Start_Call) Return(_a0 error) *MockManager_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Start_Call) RunAndReturn(run func() error) *MockManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockManager) Stop() {
	_m.Called()
}

// MockManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockManager_Expecter) Stop() *MockManager_Stop_Call {
	return &MockManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockManager_Stop_Call) Run(run func()) *MockManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Stop_Call) Return() *MockManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_Stop_Call) RunAndReturn(run func()) *MockManager_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
