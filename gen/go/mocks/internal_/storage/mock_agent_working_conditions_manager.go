// Code generated by mockery v2.50.0. DO NOT EDIT.

package storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/webitel/webitel-wfm/internal/model"

	options "github.com/webitel/webitel-wfm/internal/model/options"
)

// MockAgentWorkingConditionsManager is an autogenerated mock type for the AgentWorkingConditionsManager type
type MockAgentWorkingConditionsManager struct {
	mock.Mock
}

type MockAgentWorkingConditionsManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAgentWorkingConditionsManager) EXPECT() *MockAgentWorkingConditionsManager_Expecter {
	return &MockAgentWorkingConditionsManager_Expecter{mock: &_m.Mock}
}

// ReadAgentWorkingConditions provides a mock function with given fields: ctx, read
func (_m *MockAgentWorkingConditionsManager) ReadAgentWorkingConditions(ctx context.Context, read *options.Read) (*model.AgentWorkingConditions, error) {
	ret := _m.Called(ctx, read)

	if len(ret) == 0 {
		panic("no return value specified for ReadAgentWorkingConditions")
	}

	var r0 *model.AgentWorkingConditions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) (*model.AgentWorkingConditions, error)); ok {
		return rf(ctx, read)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) *model.AgentWorkingConditions); ok {
		r0 = rf(ctx, read)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AgentWorkingConditions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Read) error); ok {
		r1 = rf(ctx, read)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentWorkingConditionsManager_ReadAgentWorkingConditions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAgentWorkingConditions'
type MockAgentWorkingConditionsManager_ReadAgentWorkingConditions_Call struct {
	*mock.Call
}

// ReadAgentWorkingConditions is a helper method to define mock.On call
//   - ctx context.Context
//   - read *options.Read
func (_e *MockAgentWorkingConditionsManager_Expecter) ReadAgentWorkingConditions(ctx interface{}, read interface{}) *MockAgentWorkingConditionsManager_ReadAgentWorkingConditions_Call {
	return &MockAgentWorkingConditionsManager_ReadAgentWorkingConditions_Call{Call: _e.mock.On("ReadAgentWorkingConditions", ctx, read)}
}

func (_c *MockAgentWorkingConditionsManager_ReadAgentWorkingConditions_Call) Run(run func(ctx context.Context, read *options.Read)) *MockAgentWorkingConditionsManager_ReadAgentWorkingConditions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Read))
	})
	return _c
}

func (_c *MockAgentWorkingConditionsManager_ReadAgentWorkingConditions_Call) Return(_a0 *model.AgentWorkingConditions, _a1 error) *MockAgentWorkingConditionsManager_ReadAgentWorkingConditions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentWorkingConditionsManager_ReadAgentWorkingConditions_Call) RunAndReturn(run func(context.Context, *options.Read) (*model.AgentWorkingConditions, error)) *MockAgentWorkingConditionsManager_ReadAgentWorkingConditions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAgentWorkingConditions provides a mock function with given fields: ctx, read, in
func (_m *MockAgentWorkingConditionsManager) UpdateAgentWorkingConditions(ctx context.Context, read *options.Read, in *model.AgentWorkingConditions) error {
	ret := _m.Called(ctx, read, in)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgentWorkingConditions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read, *model.AgentWorkingConditions) error); ok {
		r0 = rf(ctx, read, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAgentWorkingConditionsManager_UpdateAgentWorkingConditions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAgentWorkingConditions'
type MockAgentWorkingConditionsManager_UpdateAgentWorkingConditions_Call struct {
	*mock.Call
}

// UpdateAgentWorkingConditions is a helper method to define mock.On call
//   - ctx context.Context
//   - read *options.Read
//   - in *model.AgentWorkingConditions
func (_e *MockAgentWorkingConditionsManager_Expecter) UpdateAgentWorkingConditions(ctx interface{}, read interface{}, in interface{}) *MockAgentWorkingConditionsManager_UpdateAgentWorkingConditions_Call {
	return &MockAgentWorkingConditionsManager_UpdateAgentWorkingConditions_Call{Call: _e.mock.On("UpdateAgentWorkingConditions", ctx, read, in)}
}

func (_c *MockAgentWorkingConditionsManager_UpdateAgentWorkingConditions_Call) Run(run func(ctx context.Context, read *options.Read, in *model.AgentWorkingConditions)) *MockAgentWorkingConditionsManager_UpdateAgentWorkingConditions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Read), args[2].(*model.AgentWorkingConditions))
	})
	return _c
}

func (_c *MockAgentWorkingConditionsManager_UpdateAgentWorkingConditions_Call) Return(_a0 error) *MockAgentWorkingConditionsManager_UpdateAgentWorkingConditions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAgentWorkingConditionsManager_UpdateAgentWorkingConditions_Call) RunAndReturn(run func(context.Context, *options.Read, *model.AgentWorkingConditions) error) *MockAgentWorkingConditionsManager_UpdateAgentWorkingConditions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAgentWorkingConditionsManager creates a new instance of MockAgentWorkingConditionsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAgentWorkingConditionsManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAgentWorkingConditionsManager {
	mock := &MockAgentWorkingConditionsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
