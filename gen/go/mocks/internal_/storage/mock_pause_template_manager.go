// Code generated by mockery v2.50.0. DO NOT EDIT.

package storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/webitel/webitel-wfm/internal/model"

	options "github.com/webitel/webitel-wfm/internal/model/options"
)

// MockPauseTemplateManager is an autogenerated mock type for the PauseTemplateManager type
type MockPauseTemplateManager struct {
	mock.Mock
}

type MockPauseTemplateManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPauseTemplateManager) EXPECT() *MockPauseTemplateManager_Expecter {
	return &MockPauseTemplateManager_Expecter{mock: &_m.Mock}
}

// CreatePauseTemplate provides a mock function with given fields: ctx, user, in
func (_m *MockPauseTemplateManager) CreatePauseTemplate(ctx context.Context, user *model.SignedInUser, in *model.PauseTemplate) (int64, error) {
	ret := _m.Called(ctx, user, in)

	if len(ret) == 0 {
		panic("no return value specified for CreatePauseTemplate")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignedInUser, *model.PauseTemplate) (int64, error)); ok {
		return rf(ctx, user, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignedInUser, *model.PauseTemplate) int64); ok {
		r0 = rf(ctx, user, in)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SignedInUser, *model.PauseTemplate) error); ok {
		r1 = rf(ctx, user, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPauseTemplateManager_CreatePauseTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePauseTemplate'
type MockPauseTemplateManager_CreatePauseTemplate_Call struct {
	*mock.Call
}

// CreatePauseTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.SignedInUser
//   - in *model.PauseTemplate
func (_e *MockPauseTemplateManager_Expecter) CreatePauseTemplate(ctx interface{}, user interface{}, in interface{}) *MockPauseTemplateManager_CreatePauseTemplate_Call {
	return &MockPauseTemplateManager_CreatePauseTemplate_Call{Call: _e.mock.On("CreatePauseTemplate", ctx, user, in)}
}

func (_c *MockPauseTemplateManager_CreatePauseTemplate_Call) Run(run func(ctx context.Context, user *model.SignedInUser, in *model.PauseTemplate)) *MockPauseTemplateManager_CreatePauseTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.SignedInUser), args[2].(*model.PauseTemplate))
	})
	return _c
}

func (_c *MockPauseTemplateManager_CreatePauseTemplate_Call) Return(_a0 int64, _a1 error) *MockPauseTemplateManager_CreatePauseTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPauseTemplateManager_CreatePauseTemplate_Call) RunAndReturn(run func(context.Context, *model.SignedInUser, *model.PauseTemplate) (int64, error)) *MockPauseTemplateManager_CreatePauseTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePauseTemplate provides a mock function with given fields: ctx, read
func (_m *MockPauseTemplateManager) DeletePauseTemplate(ctx context.Context, read *options.Read) (int64, error) {
	ret := _m.Called(ctx, read)

	if len(ret) == 0 {
		panic("no return value specified for DeletePauseTemplate")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) (int64, error)); ok {
		return rf(ctx, read)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) int64); ok {
		r0 = rf(ctx, read)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Read) error); ok {
		r1 = rf(ctx, read)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPauseTemplateManager_DeletePauseTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePauseTemplate'
type MockPauseTemplateManager_DeletePauseTemplate_Call struct {
	*mock.Call
}

// DeletePauseTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - read *options.Read
func (_e *MockPauseTemplateManager_Expecter) DeletePauseTemplate(ctx interface{}, read interface{}) *MockPauseTemplateManager_DeletePauseTemplate_Call {
	return &MockPauseTemplateManager_DeletePauseTemplate_Call{Call: _e.mock.On("DeletePauseTemplate", ctx, read)}
}

func (_c *MockPauseTemplateManager_DeletePauseTemplate_Call) Run(run func(ctx context.Context, read *options.Read)) *MockPauseTemplateManager_DeletePauseTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Read))
	})
	return _c
}

func (_c *MockPauseTemplateManager_DeletePauseTemplate_Call) Return(_a0 int64, _a1 error) *MockPauseTemplateManager_DeletePauseTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPauseTemplateManager_DeletePauseTemplate_Call) RunAndReturn(run func(context.Context, *options.Read) (int64, error)) *MockPauseTemplateManager_DeletePauseTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPauseTemplate provides a mock function with given fields: ctx, read
func (_m *MockPauseTemplateManager) ReadPauseTemplate(ctx context.Context, read *options.Read) (*model.PauseTemplate, error) {
	ret := _m.Called(ctx, read)

	if len(ret) == 0 {
		panic("no return value specified for ReadPauseTemplate")
	}

	var r0 *model.PauseTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) (*model.PauseTemplate, error)); ok {
		return rf(ctx, read)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) *model.PauseTemplate); ok {
		r0 = rf(ctx, read)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PauseTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Read) error); ok {
		r1 = rf(ctx, read)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPauseTemplateManager_ReadPauseTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPauseTemplate'
type MockPauseTemplateManager_ReadPauseTemplate_Call struct {
	*mock.Call
}

// ReadPauseTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - read *options.Read
func (_e *MockPauseTemplateManager_Expecter) ReadPauseTemplate(ctx interface{}, read interface{}) *MockPauseTemplateManager_ReadPauseTemplate_Call {
	return &MockPauseTemplateManager_ReadPauseTemplate_Call{Call: _e.mock.On("ReadPauseTemplate", ctx, read)}
}

func (_c *MockPauseTemplateManager_ReadPauseTemplate_Call) Run(run func(ctx context.Context, read *options.Read)) *MockPauseTemplateManager_ReadPauseTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Read))
	})
	return _c
}

func (_c *MockPauseTemplateManager_ReadPauseTemplate_Call) Return(_a0 *model.PauseTemplate, _a1 error) *MockPauseTemplateManager_ReadPauseTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPauseTemplateManager_ReadPauseTemplate_Call) RunAndReturn(run func(context.Context, *options.Read) (*model.PauseTemplate, error)) *MockPauseTemplateManager_ReadPauseTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// SearchPauseTemplate provides a mock function with given fields: ctx, search
func (_m *MockPauseTemplateManager) SearchPauseTemplate(ctx context.Context, search *options.Search) ([]*model.PauseTemplate, error) {
	ret := _m.Called(ctx, search)

	if len(ret) == 0 {
		panic("no return value specified for SearchPauseTemplate")
	}

	var r0 []*model.PauseTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Search) ([]*model.PauseTemplate, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Search) []*model.PauseTemplate); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PauseTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Search) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPauseTemplateManager_SearchPauseTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchPauseTemplate'
type MockPauseTemplateManager_SearchPauseTemplate_Call struct {
	*mock.Call
}

// SearchPauseTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - search *options.Search
func (_e *MockPauseTemplateManager_Expecter) SearchPauseTemplate(ctx interface{}, search interface{}) *MockPauseTemplateManager_SearchPauseTemplate_Call {
	return &MockPauseTemplateManager_SearchPauseTemplate_Call{Call: _e.mock.On("SearchPauseTemplate", ctx, search)}
}

func (_c *MockPauseTemplateManager_SearchPauseTemplate_Call) Run(run func(ctx context.Context, search *options.Search)) *MockPauseTemplateManager_SearchPauseTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Search))
	})
	return _c
}

func (_c *MockPauseTemplateManager_SearchPauseTemplate_Call) Return(_a0 []*model.PauseTemplate, _a1 error) *MockPauseTemplateManager_SearchPauseTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPauseTemplateManager_SearchPauseTemplate_Call) RunAndReturn(run func(context.Context, *options.Search) ([]*model.PauseTemplate, error)) *MockPauseTemplateManager_SearchPauseTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePauseTemplate provides a mock function with given fields: ctx, user, in
func (_m *MockPauseTemplateManager) UpdatePauseTemplate(ctx context.Context, user *model.SignedInUser, in *model.PauseTemplate) error {
	ret := _m.Called(ctx, user, in)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePauseTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignedInUser, *model.PauseTemplate) error); ok {
		r0 = rf(ctx, user, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPauseTemplateManager_UpdatePauseTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePauseTemplate'
type MockPauseTemplateManager_UpdatePauseTemplate_Call struct {
	*mock.Call
}

// UpdatePauseTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.SignedInUser
//   - in *model.PauseTemplate
func (_e *MockPauseTemplateManager_Expecter) UpdatePauseTemplate(ctx interface{}, user interface{}, in interface{}) *MockPauseTemplateManager_UpdatePauseTemplate_Call {
	return &MockPauseTemplateManager_UpdatePauseTemplate_Call{Call: _e.mock.On("UpdatePauseTemplate", ctx, user, in)}
}

func (_c *MockPauseTemplateManager_UpdatePauseTemplate_Call) Run(run func(ctx context.Context, user *model.SignedInUser, in *model.PauseTemplate)) *MockPauseTemplateManager_UpdatePauseTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.SignedInUser), args[2].(*model.PauseTemplate))
	})
	return _c
}

func (_c *MockPauseTemplateManager_UpdatePauseTemplate_Call) Return(_a0 error) *MockPauseTemplateManager_UpdatePauseTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPauseTemplateManager_UpdatePauseTemplate_Call) RunAndReturn(run func(context.Context, *model.SignedInUser, *model.PauseTemplate) error) *MockPauseTemplateManager_UpdatePauseTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPauseTemplateManager creates a new instance of MockPauseTemplateManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPauseTemplateManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPauseTemplateManager {
	mock := &MockPauseTemplateManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
