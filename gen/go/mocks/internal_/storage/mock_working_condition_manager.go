// Code generated by mockery v2.50.0. DO NOT EDIT.

package storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/webitel/webitel-wfm/internal/model"

	options "github.com/webitel/webitel-wfm/internal/model/options"
)

// MockWorkingConditionManager is an autogenerated mock type for the WorkingConditionManager type
type MockWorkingConditionManager struct {
	mock.Mock
}

type MockWorkingConditionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkingConditionManager) EXPECT() *MockWorkingConditionManager_Expecter {
	return &MockWorkingConditionManager_Expecter{mock: &_m.Mock}
}

// CreateWorkingCondition provides a mock function with given fields: ctx, user, in
func (_m *MockWorkingConditionManager) CreateWorkingCondition(ctx context.Context, user *model.SignedInUser, in *model.WorkingCondition) (int64, error) {
	ret := _m.Called(ctx, user, in)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkingCondition")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignedInUser, *model.WorkingCondition) (int64, error)); ok {
		return rf(ctx, user, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignedInUser, *model.WorkingCondition) int64); ok {
		r0 = rf(ctx, user, in)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SignedInUser, *model.WorkingCondition) error); ok {
		r1 = rf(ctx, user, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkingConditionManager_CreateWorkingCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkingCondition'
type MockWorkingConditionManager_CreateWorkingCondition_Call struct {
	*mock.Call
}

// CreateWorkingCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.SignedInUser
//   - in *model.WorkingCondition
func (_e *MockWorkingConditionManager_Expecter) CreateWorkingCondition(ctx interface{}, user interface{}, in interface{}) *MockWorkingConditionManager_CreateWorkingCondition_Call {
	return &MockWorkingConditionManager_CreateWorkingCondition_Call{Call: _e.mock.On("CreateWorkingCondition", ctx, user, in)}
}

func (_c *MockWorkingConditionManager_CreateWorkingCondition_Call) Run(run func(ctx context.Context, user *model.SignedInUser, in *model.WorkingCondition)) *MockWorkingConditionManager_CreateWorkingCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.SignedInUser), args[2].(*model.WorkingCondition))
	})
	return _c
}

func (_c *MockWorkingConditionManager_CreateWorkingCondition_Call) Return(_a0 int64, _a1 error) *MockWorkingConditionManager_CreateWorkingCondition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkingConditionManager_CreateWorkingCondition_Call) RunAndReturn(run func(context.Context, *model.SignedInUser, *model.WorkingCondition) (int64, error)) *MockWorkingConditionManager_CreateWorkingCondition_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkingCondition provides a mock function with given fields: ctx, read
func (_m *MockWorkingConditionManager) DeleteWorkingCondition(ctx context.Context, read *options.Read) (int64, error) {
	ret := _m.Called(ctx, read)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkingCondition")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) (int64, error)); ok {
		return rf(ctx, read)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) int64); ok {
		r0 = rf(ctx, read)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Read) error); ok {
		r1 = rf(ctx, read)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkingConditionManager_DeleteWorkingCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkingCondition'
type MockWorkingConditionManager_DeleteWorkingCondition_Call struct {
	*mock.Call
}

// DeleteWorkingCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - read *options.Read
func (_e *MockWorkingConditionManager_Expecter) DeleteWorkingCondition(ctx interface{}, read interface{}) *MockWorkingConditionManager_DeleteWorkingCondition_Call {
	return &MockWorkingConditionManager_DeleteWorkingCondition_Call{Call: _e.mock.On("DeleteWorkingCondition", ctx, read)}
}

func (_c *MockWorkingConditionManager_DeleteWorkingCondition_Call) Run(run func(ctx context.Context, read *options.Read)) *MockWorkingConditionManager_DeleteWorkingCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Read))
	})
	return _c
}

func (_c *MockWorkingConditionManager_DeleteWorkingCondition_Call) Return(_a0 int64, _a1 error) *MockWorkingConditionManager_DeleteWorkingCondition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkingConditionManager_DeleteWorkingCondition_Call) RunAndReturn(run func(context.Context, *options.Read) (int64, error)) *MockWorkingConditionManager_DeleteWorkingCondition_Call {
	_c.Call.Return(run)
	return _c
}

// ReadWorkingCondition provides a mock function with given fields: ctx, read
func (_m *MockWorkingConditionManager) ReadWorkingCondition(ctx context.Context, read *options.Read) (*model.WorkingCondition, error) {
	ret := _m.Called(ctx, read)

	if len(ret) == 0 {
		panic("no return value specified for ReadWorkingCondition")
	}

	var r0 *model.WorkingCondition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) (*model.WorkingCondition, error)); ok {
		return rf(ctx, read)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) *model.WorkingCondition); ok {
		r0 = rf(ctx, read)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WorkingCondition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Read) error); ok {
		r1 = rf(ctx, read)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkingConditionManager_ReadWorkingCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadWorkingCondition'
type MockWorkingConditionManager_ReadWorkingCondition_Call struct {
	*mock.Call
}

// ReadWorkingCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - read *options.Read
func (_e *MockWorkingConditionManager_Expecter) ReadWorkingCondition(ctx interface{}, read interface{}) *MockWorkingConditionManager_ReadWorkingCondition_Call {
	return &MockWorkingConditionManager_ReadWorkingCondition_Call{Call: _e.mock.On("ReadWorkingCondition", ctx, read)}
}

func (_c *MockWorkingConditionManager_ReadWorkingCondition_Call) Run(run func(ctx context.Context, read *options.Read)) *MockWorkingConditionManager_ReadWorkingCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Read))
	})
	return _c
}

func (_c *MockWorkingConditionManager_ReadWorkingCondition_Call) Return(_a0 *model.WorkingCondition, _a1 error) *MockWorkingConditionManager_ReadWorkingCondition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkingConditionManager_ReadWorkingCondition_Call) RunAndReturn(run func(context.Context, *options.Read) (*model.WorkingCondition, error)) *MockWorkingConditionManager_ReadWorkingCondition_Call {
	_c.Call.Return(run)
	return _c
}

// SearchWorkingCondition provides a mock function with given fields: ctx, search
func (_m *MockWorkingConditionManager) SearchWorkingCondition(ctx context.Context, search *options.Search) ([]*model.WorkingCondition, error) {
	ret := _m.Called(ctx, search)

	if len(ret) == 0 {
		panic("no return value specified for SearchWorkingCondition")
	}

	var r0 []*model.WorkingCondition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Search) ([]*model.WorkingCondition, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Search) []*model.WorkingCondition); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.WorkingCondition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Search) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkingConditionManager_SearchWorkingCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchWorkingCondition'
type MockWorkingConditionManager_SearchWorkingCondition_Call struct {
	*mock.Call
}

// SearchWorkingCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - search *options.Search
func (_e *MockWorkingConditionManager_Expecter) SearchWorkingCondition(ctx interface{}, search interface{}) *MockWorkingConditionManager_SearchWorkingCondition_Call {
	return &MockWorkingConditionManager_SearchWorkingCondition_Call{Call: _e.mock.On("SearchWorkingCondition", ctx, search)}
}

func (_c *MockWorkingConditionManager_SearchWorkingCondition_Call) Run(run func(ctx context.Context, search *options.Search)) *MockWorkingConditionManager_SearchWorkingCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Search))
	})
	return _c
}

func (_c *MockWorkingConditionManager_SearchWorkingCondition_Call) Return(_a0 []*model.WorkingCondition, _a1 error) *MockWorkingConditionManager_SearchWorkingCondition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkingConditionManager_SearchWorkingCondition_Call) RunAndReturn(run func(context.Context, *options.Search) ([]*model.WorkingCondition, error)) *MockWorkingConditionManager_SearchWorkingCondition_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkingCondition provides a mock function with given fields: ctx, user, in
func (_m *MockWorkingConditionManager) UpdateWorkingCondition(ctx context.Context, user *model.SignedInUser, in *model.WorkingCondition) error {
	ret := _m.Called(ctx, user, in)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkingCondition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignedInUser, *model.WorkingCondition) error); ok {
		r0 = rf(ctx, user, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkingConditionManager_UpdateWorkingCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkingCondition'
type MockWorkingConditionManager_UpdateWorkingCondition_Call struct {
	*mock.Call
}

// UpdateWorkingCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.SignedInUser
//   - in *model.WorkingCondition
func (_e *MockWorkingConditionManager_Expecter) UpdateWorkingCondition(ctx interface{}, user interface{}, in interface{}) *MockWorkingConditionManager_UpdateWorkingCondition_Call {
	return &MockWorkingConditionManager_UpdateWorkingCondition_Call{Call: _e.mock.On("UpdateWorkingCondition", ctx, user, in)}
}

func (_c *MockWorkingConditionManager_UpdateWorkingCondition_Call) Run(run func(ctx context.Context, user *model.SignedInUser, in *model.WorkingCondition)) *MockWorkingConditionManager_UpdateWorkingCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.SignedInUser), args[2].(*model.WorkingCondition))
	})
	return _c
}

func (_c *MockWorkingConditionManager_UpdateWorkingCondition_Call) Return(_a0 error) *MockWorkingConditionManager_UpdateWorkingCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkingConditionManager_UpdateWorkingCondition_Call) RunAndReturn(run func(context.Context, *model.SignedInUser, *model.WorkingCondition) error) *MockWorkingConditionManager_UpdateWorkingCondition_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkingConditionManager creates a new instance of MockWorkingConditionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkingConditionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkingConditionManager {
	mock := &MockWorkingConditionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
