// Code generated by mockery v2.50.0. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/webitel/webitel-wfm/internal/model"

	options "github.com/webitel/webitel-wfm/internal/model/options"
)

// MockShiftTemplateManager is an autogenerated mock type for the ShiftTemplateManager type
type MockShiftTemplateManager struct {
	mock.Mock
}

type MockShiftTemplateManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShiftTemplateManager) EXPECT() *MockShiftTemplateManager_Expecter {
	return &MockShiftTemplateManager_Expecter{mock: &_m.Mock}
}

// CreateShiftTemplate provides a mock function with given fields: ctx, read, in
func (_m *MockShiftTemplateManager) CreateShiftTemplate(ctx context.Context, read *options.Read, in *model.ShiftTemplate) (*model.ShiftTemplate, error) {
	ret := _m.Called(ctx, read, in)

	if len(ret) == 0 {
		panic("no return value specified for CreateShiftTemplate")
	}

	var r0 *model.ShiftTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read, *model.ShiftTemplate) (*model.ShiftTemplate, error)); ok {
		return rf(ctx, read, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read, *model.ShiftTemplate) *model.ShiftTemplate); ok {
		r0 = rf(ctx, read, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShiftTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Read, *model.ShiftTemplate) error); ok {
		r1 = rf(ctx, read, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShiftTemplateManager_CreateShiftTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShiftTemplate'
type MockShiftTemplateManager_CreateShiftTemplate_Call struct {
	*mock.Call
}

// CreateShiftTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - read *options.Read
//   - in *model.ShiftTemplate
func (_e *MockShiftTemplateManager_Expecter) CreateShiftTemplate(ctx interface{}, read interface{}, in interface{}) *MockShiftTemplateManager_CreateShiftTemplate_Call {
	return &MockShiftTemplateManager_CreateShiftTemplate_Call{Call: _e.mock.On("CreateShiftTemplate", ctx, read, in)}
}

func (_c *MockShiftTemplateManager_CreateShiftTemplate_Call) Run(run func(ctx context.Context, read *options.Read, in *model.ShiftTemplate)) *MockShiftTemplateManager_CreateShiftTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Read), args[2].(*model.ShiftTemplate))
	})
	return _c
}

func (_c *MockShiftTemplateManager_CreateShiftTemplate_Call) Return(_a0 *model.ShiftTemplate, _a1 error) *MockShiftTemplateManager_CreateShiftTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShiftTemplateManager_CreateShiftTemplate_Call) RunAndReturn(run func(context.Context, *options.Read, *model.ShiftTemplate) (*model.ShiftTemplate, error)) *MockShiftTemplateManager_CreateShiftTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteShiftTemplate provides a mock function with given fields: ctx, read
func (_m *MockShiftTemplateManager) DeleteShiftTemplate(ctx context.Context, read *options.Read) (int64, error) {
	ret := _m.Called(ctx, read)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShiftTemplate")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) (int64, error)); ok {
		return rf(ctx, read)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) int64); ok {
		r0 = rf(ctx, read)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Read) error); ok {
		r1 = rf(ctx, read)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShiftTemplateManager_DeleteShiftTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteShiftTemplate'
type MockShiftTemplateManager_DeleteShiftTemplate_Call struct {
	*mock.Call
}

// DeleteShiftTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - read *options.Read
func (_e *MockShiftTemplateManager_Expecter) DeleteShiftTemplate(ctx interface{}, read interface{}) *MockShiftTemplateManager_DeleteShiftTemplate_Call {
	return &MockShiftTemplateManager_DeleteShiftTemplate_Call{Call: _e.mock.On("DeleteShiftTemplate", ctx, read)}
}

func (_c *MockShiftTemplateManager_DeleteShiftTemplate_Call) Run(run func(ctx context.Context, read *options.Read)) *MockShiftTemplateManager_DeleteShiftTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Read))
	})
	return _c
}

func (_c *MockShiftTemplateManager_DeleteShiftTemplate_Call) Return(_a0 int64, _a1 error) *MockShiftTemplateManager_DeleteShiftTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShiftTemplateManager_DeleteShiftTemplate_Call) RunAndReturn(run func(context.Context, *options.Read) (int64, error)) *MockShiftTemplateManager_DeleteShiftTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ReadShiftTemplate provides a mock function with given fields: ctx, read
func (_m *MockShiftTemplateManager) ReadShiftTemplate(ctx context.Context, read *options.Read) (*model.ShiftTemplate, error) {
	ret := _m.Called(ctx, read)

	if len(ret) == 0 {
		panic("no return value specified for ReadShiftTemplate")
	}

	var r0 *model.ShiftTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) (*model.ShiftTemplate, error)); ok {
		return rf(ctx, read)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read) *model.ShiftTemplate); ok {
		r0 = rf(ctx, read)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShiftTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Read) error); ok {
		r1 = rf(ctx, read)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShiftTemplateManager_ReadShiftTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadShiftTemplate'
type MockShiftTemplateManager_ReadShiftTemplate_Call struct {
	*mock.Call
}

// ReadShiftTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - read *options.Read
func (_e *MockShiftTemplateManager_Expecter) ReadShiftTemplate(ctx interface{}, read interface{}) *MockShiftTemplateManager_ReadShiftTemplate_Call {
	return &MockShiftTemplateManager_ReadShiftTemplate_Call{Call: _e.mock.On("ReadShiftTemplate", ctx, read)}
}

func (_c *MockShiftTemplateManager_ReadShiftTemplate_Call) Run(run func(ctx context.Context, read *options.Read)) *MockShiftTemplateManager_ReadShiftTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Read))
	})
	return _c
}

func (_c *MockShiftTemplateManager_ReadShiftTemplate_Call) Return(_a0 *model.ShiftTemplate, _a1 error) *MockShiftTemplateManager_ReadShiftTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShiftTemplateManager_ReadShiftTemplate_Call) RunAndReturn(run func(context.Context, *options.Read) (*model.ShiftTemplate, error)) *MockShiftTemplateManager_ReadShiftTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// SearchShiftTemplate provides a mock function with given fields: ctx, search
func (_m *MockShiftTemplateManager) SearchShiftTemplate(ctx context.Context, search *options.Search) ([]*model.ShiftTemplate, bool, error) {
	ret := _m.Called(ctx, search)

	if len(ret) == 0 {
		panic("no return value specified for SearchShiftTemplate")
	}

	var r0 []*model.ShiftTemplate
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Search) ([]*model.ShiftTemplate, bool, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Search) []*model.ShiftTemplate); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ShiftTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Search) bool); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *options.Search) error); ok {
		r2 = rf(ctx, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockShiftTemplateManager_SearchShiftTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchShiftTemplate'
type MockShiftTemplateManager_SearchShiftTemplate_Call struct {
	*mock.Call
}

// SearchShiftTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - search *options.Search
func (_e *MockShiftTemplateManager_Expecter) SearchShiftTemplate(ctx interface{}, search interface{}) *MockShiftTemplateManager_SearchShiftTemplate_Call {
	return &MockShiftTemplateManager_SearchShiftTemplate_Call{Call: _e.mock.On("SearchShiftTemplate", ctx, search)}
}

func (_c *MockShiftTemplateManager_SearchShiftTemplate_Call) Run(run func(ctx context.Context, search *options.Search)) *MockShiftTemplateManager_SearchShiftTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Search))
	})
	return _c
}

func (_c *MockShiftTemplateManager_SearchShiftTemplate_Call) Return(_a0 []*model.ShiftTemplate, _a1 bool, _a2 error) *MockShiftTemplateManager_SearchShiftTemplate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockShiftTemplateManager_SearchShiftTemplate_Call) RunAndReturn(run func(context.Context, *options.Search) ([]*model.ShiftTemplate, bool, error)) *MockShiftTemplateManager_SearchShiftTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShiftTemplate provides a mock function with given fields: ctx, read, in
func (_m *MockShiftTemplateManager) UpdateShiftTemplate(ctx context.Context, read *options.Read, in *model.ShiftTemplate) (*model.ShiftTemplate, error) {
	ret := _m.Called(ctx, read, in)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShiftTemplate")
	}

	var r0 *model.ShiftTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read, *model.ShiftTemplate) (*model.ShiftTemplate, error)); ok {
		return rf(ctx, read, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *options.Read, *model.ShiftTemplate) *model.ShiftTemplate); ok {
		r0 = rf(ctx, read, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShiftTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *options.Read, *model.ShiftTemplate) error); ok {
		r1 = rf(ctx, read, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShiftTemplateManager_UpdateShiftTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShiftTemplate'
type MockShiftTemplateManager_UpdateShiftTemplate_Call struct {
	*mock.Call
}

// UpdateShiftTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - read *options.Read
//   - in *model.ShiftTemplate
func (_e *MockShiftTemplateManager_Expecter) UpdateShiftTemplate(ctx interface{}, read interface{}, in interface{}) *MockShiftTemplateManager_UpdateShiftTemplate_Call {
	return &MockShiftTemplateManager_UpdateShiftTemplate_Call{Call: _e.mock.On("UpdateShiftTemplate", ctx, read, in)}
}

func (_c *MockShiftTemplateManager_UpdateShiftTemplate_Call) Run(run func(ctx context.Context, read *options.Read, in *model.ShiftTemplate)) *MockShiftTemplateManager_UpdateShiftTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*options.Read), args[2].(*model.ShiftTemplate))
	})
	return _c
}

func (_c *MockShiftTemplateManager_UpdateShiftTemplate_Call) Return(_a0 *model.ShiftTemplate, _a1 error) *MockShiftTemplateManager_UpdateShiftTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShiftTemplateManager_UpdateShiftTemplate_Call) RunAndReturn(run func(context.Context, *options.Read, *model.ShiftTemplate) (*model.ShiftTemplate, error)) *MockShiftTemplateManager_UpdateShiftTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShiftTemplateManager creates a new instance of MockShiftTemplateManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShiftTemplateManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShiftTemplateManager {
	mock := &MockShiftTemplateManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
