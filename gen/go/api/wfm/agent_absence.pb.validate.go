// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: agent_absence.proto

package wfm

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAgentAbsenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAgentAbsenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAgentAbsenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAgentAbsenceRequestMultiError, or nil if none found.
func (m *CreateAgentAbsenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentAbsenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAgentAbsenceRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAgentAbsenceRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAgentAbsenceRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAgentAbsenceRequestMultiError(errors)
	}

	return nil
}

// CreateAgentAbsenceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAgentAbsenceRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateAgentAbsenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentAbsenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentAbsenceRequestMultiError) AllErrors() []error { return m }

// CreateAgentAbsenceRequestValidationError is the validation error returned by
// CreateAgentAbsenceRequest.Validate if the designated constraints aren't met.
type CreateAgentAbsenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentAbsenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentAbsenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentAbsenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentAbsenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentAbsenceRequestValidationError) ErrorName() string {
	return "CreateAgentAbsenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentAbsenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentAbsenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentAbsenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentAbsenceRequestValidationError{}

// Validate checks the field values on CreateAgentAbsenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAgentAbsenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAgentAbsenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAgentAbsenceResponseMultiError, or nil if none found.
func (m *CreateAgentAbsenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentAbsenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAgentAbsenceResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAgentAbsenceResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAgentAbsenceResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAgentAbsenceResponseMultiError(errors)
	}

	return nil
}

// CreateAgentAbsenceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAgentAbsenceResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateAgentAbsenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentAbsenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentAbsenceResponseMultiError) AllErrors() []error { return m }

// CreateAgentAbsenceResponseValidationError is the validation error returned
// by CreateAgentAbsenceResponse.Validate if the designated constraints aren't met.
type CreateAgentAbsenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentAbsenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentAbsenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentAbsenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentAbsenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentAbsenceResponseValidationError) ErrorName() string {
	return "CreateAgentAbsenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentAbsenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentAbsenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentAbsenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentAbsenceResponseValidationError{}

// Validate checks the field values on ReadAgentAbsenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadAgentAbsenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadAgentAbsenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadAgentAbsenceRequestMultiError, or nil if none found.
func (m *ReadAgentAbsenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadAgentAbsenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AgentId

	if len(errors) > 0 {
		return ReadAgentAbsenceRequestMultiError(errors)
	}

	return nil
}

// ReadAgentAbsenceRequestMultiError is an error wrapping multiple validation
// errors returned by ReadAgentAbsenceRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadAgentAbsenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadAgentAbsenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadAgentAbsenceRequestMultiError) AllErrors() []error { return m }

// ReadAgentAbsenceRequestValidationError is the validation error returned by
// ReadAgentAbsenceRequest.Validate if the designated constraints aren't met.
type ReadAgentAbsenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAgentAbsenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAgentAbsenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAgentAbsenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAgentAbsenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAgentAbsenceRequestValidationError) ErrorName() string {
	return "ReadAgentAbsenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAgentAbsenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAgentAbsenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAgentAbsenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAgentAbsenceRequestValidationError{}

// Validate checks the field values on ReadAgentAbsenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadAgentAbsenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadAgentAbsenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadAgentAbsenceResponseMultiError, or nil if none found.
func (m *ReadAgentAbsenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadAgentAbsenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadAgentAbsenceResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadAgentAbsenceResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadAgentAbsenceResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadAgentAbsenceResponseMultiError(errors)
	}

	return nil
}

// ReadAgentAbsenceResponseMultiError is an error wrapping multiple validation
// errors returned by ReadAgentAbsenceResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadAgentAbsenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadAgentAbsenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadAgentAbsenceResponseMultiError) AllErrors() []error { return m }

// ReadAgentAbsenceResponseValidationError is the validation error returned by
// ReadAgentAbsenceResponse.Validate if the designated constraints aren't met.
type ReadAgentAbsenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAgentAbsenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAgentAbsenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAgentAbsenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAgentAbsenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAgentAbsenceResponseValidationError) ErrorName() string {
	return "ReadAgentAbsenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAgentAbsenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAgentAbsenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAgentAbsenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAgentAbsenceResponseValidationError{}

// Validate checks the field values on SearchAgentAbsenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAgentAbsenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAgentAbsenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAgentAbsenceRequestMultiError, or nil if none found.
func (m *SearchAgentAbsenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAgentAbsenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.Size != nil {
		// no validation rules for Size
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if len(errors) > 0 {
		return SearchAgentAbsenceRequestMultiError(errors)
	}

	return nil
}

// SearchAgentAbsenceRequestMultiError is an error wrapping multiple validation
// errors returned by SearchAgentAbsenceRequest.ValidateAll() if the
// designated constraints aren't met.
type SearchAgentAbsenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAgentAbsenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAgentAbsenceRequestMultiError) AllErrors() []error { return m }

// SearchAgentAbsenceRequestValidationError is the validation error returned by
// SearchAgentAbsenceRequest.Validate if the designated constraints aren't met.
type SearchAgentAbsenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAgentAbsenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAgentAbsenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAgentAbsenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAgentAbsenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAgentAbsenceRequestValidationError) ErrorName() string {
	return "SearchAgentAbsenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAgentAbsenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAgentAbsenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAgentAbsenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAgentAbsenceRequestValidationError{}

// Validate checks the field values on SearchAgentAbsenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAgentAbsenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAgentAbsenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAgentAbsenceResponseMultiError, or nil if none found.
func (m *SearchAgentAbsenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAgentAbsenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAgentAbsenceResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAgentAbsenceResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAgentAbsenceResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchAgentAbsenceResponseMultiError(errors)
	}

	return nil
}

// SearchAgentAbsenceResponseMultiError is an error wrapping multiple
// validation errors returned by SearchAgentAbsenceResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchAgentAbsenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAgentAbsenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAgentAbsenceResponseMultiError) AllErrors() []error { return m }

// SearchAgentAbsenceResponseValidationError is the validation error returned
// by SearchAgentAbsenceResponse.Validate if the designated constraints aren't met.
type SearchAgentAbsenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAgentAbsenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAgentAbsenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAgentAbsenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAgentAbsenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAgentAbsenceResponseValidationError) ErrorName() string {
	return "SearchAgentAbsenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAgentAbsenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAgentAbsenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAgentAbsenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAgentAbsenceResponseValidationError{}

// Validate checks the field values on UpdateAgentAbsenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAgentAbsenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentAbsenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAgentAbsenceRequestMultiError, or nil if none found.
func (m *UpdateAgentAbsenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentAbsenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAgentAbsenceRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAgentAbsenceRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAgentAbsenceRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAgentAbsenceRequestMultiError(errors)
	}

	return nil
}

// UpdateAgentAbsenceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAgentAbsenceRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateAgentAbsenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentAbsenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentAbsenceRequestMultiError) AllErrors() []error { return m }

// UpdateAgentAbsenceRequestValidationError is the validation error returned by
// UpdateAgentAbsenceRequest.Validate if the designated constraints aren't met.
type UpdateAgentAbsenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentAbsenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentAbsenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentAbsenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentAbsenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentAbsenceRequestValidationError) ErrorName() string {
	return "UpdateAgentAbsenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentAbsenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentAbsenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentAbsenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentAbsenceRequestValidationError{}

// Validate checks the field values on UpdateAgentAbsenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAgentAbsenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentAbsenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAgentAbsenceResponseMultiError, or nil if none found.
func (m *UpdateAgentAbsenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentAbsenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAgentAbsenceResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAgentAbsenceResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAgentAbsenceResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAgentAbsenceResponseMultiError(errors)
	}

	return nil
}

// UpdateAgentAbsenceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAgentAbsenceResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateAgentAbsenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentAbsenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentAbsenceResponseMultiError) AllErrors() []error { return m }

// UpdateAgentAbsenceResponseValidationError is the validation error returned
// by UpdateAgentAbsenceResponse.Validate if the designated constraints aren't met.
type UpdateAgentAbsenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentAbsenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentAbsenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentAbsenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentAbsenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentAbsenceResponseValidationError) ErrorName() string {
	return "UpdateAgentAbsenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentAbsenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentAbsenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentAbsenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentAbsenceResponseValidationError{}

// Validate checks the field values on DeleteAgentAbsenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAgentAbsenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAgentAbsenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAgentAbsenceRequestMultiError, or nil if none found.
func (m *DeleteAgentAbsenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAgentAbsenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AgentId

	if len(errors) > 0 {
		return DeleteAgentAbsenceRequestMultiError(errors)
	}

	return nil
}

// DeleteAgentAbsenceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAgentAbsenceRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteAgentAbsenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAgentAbsenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAgentAbsenceRequestMultiError) AllErrors() []error { return m }

// DeleteAgentAbsenceRequestValidationError is the validation error returned by
// DeleteAgentAbsenceRequest.Validate if the designated constraints aren't met.
type DeleteAgentAbsenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAgentAbsenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAgentAbsenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAgentAbsenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAgentAbsenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAgentAbsenceRequestValidationError) ErrorName() string {
	return "DeleteAgentAbsenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAgentAbsenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAgentAbsenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAgentAbsenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAgentAbsenceRequestValidationError{}

// Validate checks the field values on DeleteAgentAbsenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAgentAbsenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAgentAbsenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAgentAbsenceResponseMultiError, or nil if none found.
func (m *DeleteAgentAbsenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAgentAbsenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAgentAbsenceResponseMultiError(errors)
	}

	return nil
}

// DeleteAgentAbsenceResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAgentAbsenceResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteAgentAbsenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAgentAbsenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAgentAbsenceResponseMultiError) AllErrors() []error { return m }

// DeleteAgentAbsenceResponseValidationError is the validation error returned
// by DeleteAgentAbsenceResponse.Validate if the designated constraints aren't met.
type DeleteAgentAbsenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAgentAbsenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAgentAbsenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAgentAbsenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAgentAbsenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAgentAbsenceResponseValidationError) ErrorName() string {
	return "DeleteAgentAbsenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAgentAbsenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAgentAbsenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAgentAbsenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAgentAbsenceResponseValidationError{}

// Validate checks the field values on CreateAgentsAbsencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAgentsAbsencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAgentsAbsencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAgentsAbsencesRequestMultiError, or nil if none found.
func (m *CreateAgentsAbsencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentsAbsencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAgentsAbsencesRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAgentsAbsencesRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAgentsAbsencesRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateAgentsAbsencesRequestMultiError(errors)
	}

	return nil
}

// CreateAgentsAbsencesRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAgentsAbsencesRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateAgentsAbsencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentsAbsencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentsAbsencesRequestMultiError) AllErrors() []error { return m }

// CreateAgentsAbsencesRequestValidationError is the validation error returned
// by CreateAgentsAbsencesRequest.Validate if the designated constraints
// aren't met.
type CreateAgentsAbsencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentsAbsencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentsAbsencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentsAbsencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentsAbsencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentsAbsencesRequestValidationError) ErrorName() string {
	return "CreateAgentsAbsencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentsAbsencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentsAbsencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentsAbsencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentsAbsencesRequestValidationError{}

// Validate checks the field values on CreateAgentsAbsencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAgentsAbsencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAgentsAbsencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAgentsAbsencesResponseMultiError, or nil if none found.
func (m *CreateAgentsAbsencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentsAbsencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAgentsAbsencesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAgentsAbsencesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAgentsAbsencesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateAgentsAbsencesResponseMultiError(errors)
	}

	return nil
}

// CreateAgentsAbsencesResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAgentsAbsencesResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateAgentsAbsencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentsAbsencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentsAbsencesResponseMultiError) AllErrors() []error { return m }

// CreateAgentsAbsencesResponseValidationError is the validation error returned
// by CreateAgentsAbsencesResponse.Validate if the designated constraints
// aren't met.
type CreateAgentsAbsencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentsAbsencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentsAbsencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentsAbsencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentsAbsencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentsAbsencesResponseValidationError) ErrorName() string {
	return "CreateAgentsAbsencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentsAbsencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentsAbsencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentsAbsencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentsAbsencesResponseValidationError{}

// Validate checks the field values on SearchAgentsAbsencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAgentsAbsencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAgentsAbsencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAgentsAbsencesRequestMultiError, or nil if none found.
func (m *SearchAgentsAbsencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAgentsAbsencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Q != nil {
		// no validation rules for Q
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.Size != nil {
		// no validation rules for Size
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if len(errors) > 0 {
		return SearchAgentsAbsencesRequestMultiError(errors)
	}

	return nil
}

// SearchAgentsAbsencesRequestMultiError is an error wrapping multiple
// validation errors returned by SearchAgentsAbsencesRequest.ValidateAll() if
// the designated constraints aren't met.
type SearchAgentsAbsencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAgentsAbsencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAgentsAbsencesRequestMultiError) AllErrors() []error { return m }

// SearchAgentsAbsencesRequestValidationError is the validation error returned
// by SearchAgentsAbsencesRequest.Validate if the designated constraints
// aren't met.
type SearchAgentsAbsencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAgentsAbsencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAgentsAbsencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAgentsAbsencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAgentsAbsencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAgentsAbsencesRequestValidationError) ErrorName() string {
	return "SearchAgentsAbsencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAgentsAbsencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAgentsAbsencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAgentsAbsencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAgentsAbsencesRequestValidationError{}

// Validate checks the field values on SearchAgentsAbsencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAgentsAbsencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAgentsAbsencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAgentsAbsencesResponseMultiError, or nil if none found.
func (m *SearchAgentsAbsencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAgentsAbsencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAgentsAbsencesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAgentsAbsencesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAgentsAbsencesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Next

	if len(errors) > 0 {
		return SearchAgentsAbsencesResponseMultiError(errors)
	}

	return nil
}

// SearchAgentsAbsencesResponseMultiError is an error wrapping multiple
// validation errors returned by SearchAgentsAbsencesResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchAgentsAbsencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAgentsAbsencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAgentsAbsencesResponseMultiError) AllErrors() []error { return m }

// SearchAgentsAbsencesResponseValidationError is the validation error returned
// by SearchAgentsAbsencesResponse.Validate if the designated constraints
// aren't met.
type SearchAgentsAbsencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAgentsAbsencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAgentsAbsencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAgentsAbsencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAgentsAbsencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAgentsAbsencesResponseValidationError) ErrorName() string {
	return "SearchAgentsAbsencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAgentsAbsencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAgentsAbsencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAgentsAbsencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAgentsAbsencesResponseValidationError{}

// Validate checks the field values on AgentAbsences with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AgentAbsences) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentAbsences with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AgentAbsencesMultiError, or
// nil if none found.
func (m *AgentAbsences) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentAbsences) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgentAbsencesValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgentAbsencesValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgentAbsencesValidationError{
				field:  "Agent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAbsences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentAbsencesValidationError{
						field:  fmt.Sprintf("Absences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentAbsencesValidationError{
						field:  fmt.Sprintf("Absences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentAbsencesValidationError{
					field:  fmt.Sprintf("Absences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AgentAbsencesMultiError(errors)
	}

	return nil
}

// AgentAbsencesMultiError is an error wrapping multiple validation errors
// returned by AgentAbsences.ValidateAll() if the designated constraints
// aren't met.
type AgentAbsencesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentAbsencesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentAbsencesMultiError) AllErrors() []error { return m }

// AgentAbsencesValidationError is the validation error returned by
// AgentAbsences.Validate if the designated constraints aren't met.
type AgentAbsencesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentAbsencesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentAbsencesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentAbsencesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentAbsencesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentAbsencesValidationError) ErrorName() string { return "AgentAbsencesValidationError" }

// Error satisfies the builtin error interface
func (e AgentAbsencesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentAbsences.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentAbsencesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentAbsencesValidationError{}

// Validate checks the field values on Absence with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Absence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Absence with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AbsenceMultiError, or nil if none found.
func (m *Absence) ValidateAll() error {
	return m.validate(true)
}

func (m *Absence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DomainId

	// no validation rules for CreatedAt

	if all {
		switch v := interface{}(m.GetCreatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AbsenceValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AbsenceValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbsenceValidationError{
				field:  "CreatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AbsenceValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AbsenceValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbsenceValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TypeId

	// no validation rules for AbsentAt

	if len(errors) > 0 {
		return AbsenceMultiError(errors)
	}

	return nil
}

// AbsenceMultiError is an error wrapping multiple validation errors returned
// by Absence.ValidateAll() if the designated constraints aren't met.
type AbsenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbsenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbsenceMultiError) AllErrors() []error { return m }

// AbsenceValidationError is the validation error returned by Absence.Validate
// if the designated constraints aren't met.
type AbsenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbsenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbsenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbsenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbsenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbsenceValidationError) ErrorName() string { return "AbsenceValidationError" }

// Error satisfies the builtin error interface
func (e AbsenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbsence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbsenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbsenceValidationError{}

// Validate checks the field values on CreateAgentsAbsencesRequestAbsentType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateAgentsAbsencesRequestAbsentType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAgentsAbsencesRequestAbsentType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateAgentsAbsencesRequestAbsentTypeMultiError, or nil if none found.
func (m *CreateAgentsAbsencesRequestAbsentType) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentsAbsencesRequestAbsentType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TypeId

	// no validation rules for DateFrom

	// no validation rules for DateTo

	if len(errors) > 0 {
		return CreateAgentsAbsencesRequestAbsentTypeMultiError(errors)
	}

	return nil
}

// CreateAgentsAbsencesRequestAbsentTypeMultiError is an error wrapping
// multiple validation errors returned by
// CreateAgentsAbsencesRequestAbsentType.ValidateAll() if the designated
// constraints aren't met.
type CreateAgentsAbsencesRequestAbsentTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentsAbsencesRequestAbsentTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentsAbsencesRequestAbsentTypeMultiError) AllErrors() []error { return m }

// CreateAgentsAbsencesRequestAbsentTypeValidationError is the validation error
// returned by CreateAgentsAbsencesRequestAbsentType.Validate if the
// designated constraints aren't met.
type CreateAgentsAbsencesRequestAbsentTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentsAbsencesRequestAbsentTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentsAbsencesRequestAbsentTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentsAbsencesRequestAbsentTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentsAbsencesRequestAbsentTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentsAbsencesRequestAbsentTypeValidationError) ErrorName() string {
	return "CreateAgentsAbsencesRequestAbsentTypeValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentsAbsencesRequestAbsentTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentsAbsencesRequestAbsentType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentsAbsencesRequestAbsentTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentsAbsencesRequestAbsentTypeValidationError{}
