// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: working_condition.proto

package wfm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkingConditionService_CreateWorkingCondition_FullMethodName = "/wfm.WorkingConditionService/CreateWorkingCondition"
	WorkingConditionService_ReadWorkingCondition_FullMethodName   = "/wfm.WorkingConditionService/ReadWorkingCondition"
	WorkingConditionService_SearchWorkingCondition_FullMethodName = "/wfm.WorkingConditionService/SearchWorkingCondition"
	WorkingConditionService_UpdateWorkingCondition_FullMethodName = "/wfm.WorkingConditionService/UpdateWorkingCondition"
	WorkingConditionService_DeleteWorkingCondition_FullMethodName = "/wfm.WorkingConditionService/DeleteWorkingCondition"
)

// WorkingConditionServiceClient is the client API for WorkingConditionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkingConditionServiceClient interface {
	CreateWorkingCondition(ctx context.Context, in *CreateWorkingConditionRequest, opts ...grpc.CallOption) (*CreateWorkingConditionResponse, error)
	ReadWorkingCondition(ctx context.Context, in *ReadWorkingConditionRequest, opts ...grpc.CallOption) (*ReadWorkingConditionResponse, error)
	SearchWorkingCondition(ctx context.Context, in *SearchWorkingConditionRequest, opts ...grpc.CallOption) (*SearchWorkingConditionResponse, error)
	UpdateWorkingCondition(ctx context.Context, in *UpdateWorkingConditionRequest, opts ...grpc.CallOption) (*UpdateWorkingConditionResponse, error)
	DeleteWorkingCondition(ctx context.Context, in *DeleteWorkingConditionRequest, opts ...grpc.CallOption) (*DeleteWorkingConditionResponse, error)
}

type workingConditionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkingConditionServiceClient(cc grpc.ClientConnInterface) WorkingConditionServiceClient {
	return &workingConditionServiceClient{cc}
}

func (c *workingConditionServiceClient) CreateWorkingCondition(ctx context.Context, in *CreateWorkingConditionRequest, opts ...grpc.CallOption) (*CreateWorkingConditionResponse, error) {
	out := new(CreateWorkingConditionResponse)
	err := c.cc.Invoke(ctx, WorkingConditionService_CreateWorkingCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingConditionServiceClient) ReadWorkingCondition(ctx context.Context, in *ReadWorkingConditionRequest, opts ...grpc.CallOption) (*ReadWorkingConditionResponse, error) {
	out := new(ReadWorkingConditionResponse)
	err := c.cc.Invoke(ctx, WorkingConditionService_ReadWorkingCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingConditionServiceClient) SearchWorkingCondition(ctx context.Context, in *SearchWorkingConditionRequest, opts ...grpc.CallOption) (*SearchWorkingConditionResponse, error) {
	out := new(SearchWorkingConditionResponse)
	err := c.cc.Invoke(ctx, WorkingConditionService_SearchWorkingCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingConditionServiceClient) UpdateWorkingCondition(ctx context.Context, in *UpdateWorkingConditionRequest, opts ...grpc.CallOption) (*UpdateWorkingConditionResponse, error) {
	out := new(UpdateWorkingConditionResponse)
	err := c.cc.Invoke(ctx, WorkingConditionService_UpdateWorkingCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingConditionServiceClient) DeleteWorkingCondition(ctx context.Context, in *DeleteWorkingConditionRequest, opts ...grpc.CallOption) (*DeleteWorkingConditionResponse, error) {
	out := new(DeleteWorkingConditionResponse)
	err := c.cc.Invoke(ctx, WorkingConditionService_DeleteWorkingCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkingConditionServiceServer is the server API for WorkingConditionService service.
// All implementations must embed UnimplementedWorkingConditionServiceServer
// for forward compatibility
type WorkingConditionServiceServer interface {
	CreateWorkingCondition(context.Context, *CreateWorkingConditionRequest) (*CreateWorkingConditionResponse, error)
	ReadWorkingCondition(context.Context, *ReadWorkingConditionRequest) (*ReadWorkingConditionResponse, error)
	SearchWorkingCondition(context.Context, *SearchWorkingConditionRequest) (*SearchWorkingConditionResponse, error)
	UpdateWorkingCondition(context.Context, *UpdateWorkingConditionRequest) (*UpdateWorkingConditionResponse, error)
	DeleteWorkingCondition(context.Context, *DeleteWorkingConditionRequest) (*DeleteWorkingConditionResponse, error)
	mustEmbedUnimplementedWorkingConditionServiceServer()
}

// UnimplementedWorkingConditionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkingConditionServiceServer struct {
}

func (UnimplementedWorkingConditionServiceServer) CreateWorkingCondition(context.Context, *CreateWorkingConditionRequest) (*CreateWorkingConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkingCondition not implemented")
}
func (UnimplementedWorkingConditionServiceServer) ReadWorkingCondition(context.Context, *ReadWorkingConditionRequest) (*ReadWorkingConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWorkingCondition not implemented")
}
func (UnimplementedWorkingConditionServiceServer) SearchWorkingCondition(context.Context, *SearchWorkingConditionRequest) (*SearchWorkingConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWorkingCondition not implemented")
}
func (UnimplementedWorkingConditionServiceServer) UpdateWorkingCondition(context.Context, *UpdateWorkingConditionRequest) (*UpdateWorkingConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkingCondition not implemented")
}
func (UnimplementedWorkingConditionServiceServer) DeleteWorkingCondition(context.Context, *DeleteWorkingConditionRequest) (*DeleteWorkingConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkingCondition not implemented")
}
func (UnimplementedWorkingConditionServiceServer) mustEmbedUnimplementedWorkingConditionServiceServer() {
}

// UnsafeWorkingConditionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkingConditionServiceServer will
// result in compilation errors.
type UnsafeWorkingConditionServiceServer interface {
	mustEmbedUnimplementedWorkingConditionServiceServer()
}

func RegisterWorkingConditionServiceServer(s grpc.ServiceRegistrar, srv WorkingConditionServiceServer) {
	s.RegisterService(&WorkingConditionService_ServiceDesc, srv)
}

func _WorkingConditionService_CreateWorkingCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkingConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingConditionServiceServer).CreateWorkingCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingConditionService_CreateWorkingCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingConditionServiceServer).CreateWorkingCondition(ctx, req.(*CreateWorkingConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingConditionService_ReadWorkingCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWorkingConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingConditionServiceServer).ReadWorkingCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingConditionService_ReadWorkingCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingConditionServiceServer).ReadWorkingCondition(ctx, req.(*ReadWorkingConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingConditionService_SearchWorkingCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWorkingConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingConditionServiceServer).SearchWorkingCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingConditionService_SearchWorkingCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingConditionServiceServer).SearchWorkingCondition(ctx, req.(*SearchWorkingConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingConditionService_UpdateWorkingCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkingConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingConditionServiceServer).UpdateWorkingCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingConditionService_UpdateWorkingCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingConditionServiceServer).UpdateWorkingCondition(ctx, req.(*UpdateWorkingConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingConditionService_DeleteWorkingCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkingConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingConditionServiceServer).DeleteWorkingCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingConditionService_DeleteWorkingCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingConditionServiceServer).DeleteWorkingCondition(ctx, req.(*DeleteWorkingConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkingConditionService_ServiceDesc is the grpc.ServiceDesc for WorkingConditionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkingConditionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wfm.WorkingConditionService",
	HandlerType: (*WorkingConditionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkingCondition",
			Handler:    _WorkingConditionService_CreateWorkingCondition_Handler,
		},
		{
			MethodName: "ReadWorkingCondition",
			Handler:    _WorkingConditionService_ReadWorkingCondition_Handler,
		},
		{
			MethodName: "SearchWorkingCondition",
			Handler:    _WorkingConditionService_SearchWorkingCondition_Handler,
		},
		{
			MethodName: "UpdateWorkingCondition",
			Handler:    _WorkingConditionService_UpdateWorkingCondition_Handler,
		},
		{
			MethodName: "DeleteWorkingCondition",
			Handler:    _WorkingConditionService_DeleteWorkingCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "working_condition.proto",
}
