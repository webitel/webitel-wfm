// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pause_template.proto

package wfm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PauseTemplateService_CreatePauseTemplate_FullMethodName = "/wfm.PauseTemplateService/CreatePauseTemplate"
	PauseTemplateService_ReadPauseTemplate_FullMethodName   = "/wfm.PauseTemplateService/ReadPauseTemplate"
	PauseTemplateService_SearchPauseTemplate_FullMethodName = "/wfm.PauseTemplateService/SearchPauseTemplate"
	PauseTemplateService_UpdatePauseTemplate_FullMethodName = "/wfm.PauseTemplateService/UpdatePauseTemplate"
	PauseTemplateService_DeletePauseTemplate_FullMethodName = "/wfm.PauseTemplateService/DeletePauseTemplate"
)

// PauseTemplateServiceClient is the client API for PauseTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PauseTemplateServiceClient interface {
	CreatePauseTemplate(ctx context.Context, in *CreatePauseTemplateRequest, opts ...grpc.CallOption) (*CreatePauseTemplateResponse, error)
	ReadPauseTemplate(ctx context.Context, in *ReadPauseTemplateRequest, opts ...grpc.CallOption) (*ReadPauseTemplateResponse, error)
	SearchPauseTemplate(ctx context.Context, in *SearchPauseTemplateRequest, opts ...grpc.CallOption) (*SearchPauseTemplateResponse, error)
	// UpdatePauseTemplateCauseBulk updates a pause template with a list of causes.
	// Update existing cause, create that not exists in database and delete that not exists in the list.
	UpdatePauseTemplate(ctx context.Context, in *UpdatePauseTemplateRequest, opts ...grpc.CallOption) (*UpdatePauseTemplateResponse, error)
	DeletePauseTemplate(ctx context.Context, in *DeletePauseTemplateRequest, opts ...grpc.CallOption) (*DeletePauseTemplateResponse, error)
}

type pauseTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPauseTemplateServiceClient(cc grpc.ClientConnInterface) PauseTemplateServiceClient {
	return &pauseTemplateServiceClient{cc}
}

func (c *pauseTemplateServiceClient) CreatePauseTemplate(ctx context.Context, in *CreatePauseTemplateRequest, opts ...grpc.CallOption) (*CreatePauseTemplateResponse, error) {
	out := new(CreatePauseTemplateResponse)
	err := c.cc.Invoke(ctx, PauseTemplateService_CreatePauseTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pauseTemplateServiceClient) ReadPauseTemplate(ctx context.Context, in *ReadPauseTemplateRequest, opts ...grpc.CallOption) (*ReadPauseTemplateResponse, error) {
	out := new(ReadPauseTemplateResponse)
	err := c.cc.Invoke(ctx, PauseTemplateService_ReadPauseTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pauseTemplateServiceClient) SearchPauseTemplate(ctx context.Context, in *SearchPauseTemplateRequest, opts ...grpc.CallOption) (*SearchPauseTemplateResponse, error) {
	out := new(SearchPauseTemplateResponse)
	err := c.cc.Invoke(ctx, PauseTemplateService_SearchPauseTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pauseTemplateServiceClient) UpdatePauseTemplate(ctx context.Context, in *UpdatePauseTemplateRequest, opts ...grpc.CallOption) (*UpdatePauseTemplateResponse, error) {
	out := new(UpdatePauseTemplateResponse)
	err := c.cc.Invoke(ctx, PauseTemplateService_UpdatePauseTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pauseTemplateServiceClient) DeletePauseTemplate(ctx context.Context, in *DeletePauseTemplateRequest, opts ...grpc.CallOption) (*DeletePauseTemplateResponse, error) {
	out := new(DeletePauseTemplateResponse)
	err := c.cc.Invoke(ctx, PauseTemplateService_DeletePauseTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PauseTemplateServiceServer is the server API for PauseTemplateService service.
// All implementations must embed UnimplementedPauseTemplateServiceServer
// for forward compatibility
type PauseTemplateServiceServer interface {
	CreatePauseTemplate(context.Context, *CreatePauseTemplateRequest) (*CreatePauseTemplateResponse, error)
	ReadPauseTemplate(context.Context, *ReadPauseTemplateRequest) (*ReadPauseTemplateResponse, error)
	SearchPauseTemplate(context.Context, *SearchPauseTemplateRequest) (*SearchPauseTemplateResponse, error)
	// UpdatePauseTemplateCauseBulk updates a pause template with a list of causes.
	// Update existing cause, create that not exists in database and delete that not exists in the list.
	UpdatePauseTemplate(context.Context, *UpdatePauseTemplateRequest) (*UpdatePauseTemplateResponse, error)
	DeletePauseTemplate(context.Context, *DeletePauseTemplateRequest) (*DeletePauseTemplateResponse, error)
	mustEmbedUnimplementedPauseTemplateServiceServer()
}

// UnimplementedPauseTemplateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPauseTemplateServiceServer struct {
}

func (UnimplementedPauseTemplateServiceServer) CreatePauseTemplate(context.Context, *CreatePauseTemplateRequest) (*CreatePauseTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePauseTemplate not implemented")
}
func (UnimplementedPauseTemplateServiceServer) ReadPauseTemplate(context.Context, *ReadPauseTemplateRequest) (*ReadPauseTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPauseTemplate not implemented")
}
func (UnimplementedPauseTemplateServiceServer) SearchPauseTemplate(context.Context, *SearchPauseTemplateRequest) (*SearchPauseTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPauseTemplate not implemented")
}
func (UnimplementedPauseTemplateServiceServer) UpdatePauseTemplate(context.Context, *UpdatePauseTemplateRequest) (*UpdatePauseTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePauseTemplate not implemented")
}
func (UnimplementedPauseTemplateServiceServer) DeletePauseTemplate(context.Context, *DeletePauseTemplateRequest) (*DeletePauseTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePauseTemplate not implemented")
}
func (UnimplementedPauseTemplateServiceServer) mustEmbedUnimplementedPauseTemplateServiceServer() {}

// UnsafePauseTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PauseTemplateServiceServer will
// result in compilation errors.
type UnsafePauseTemplateServiceServer interface {
	mustEmbedUnimplementedPauseTemplateServiceServer()
}

func RegisterPauseTemplateServiceServer(s grpc.ServiceRegistrar, srv PauseTemplateServiceServer) {
	s.RegisterService(&PauseTemplateService_ServiceDesc, srv)
}

func _PauseTemplateService_CreatePauseTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePauseTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PauseTemplateServiceServer).CreatePauseTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PauseTemplateService_CreatePauseTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PauseTemplateServiceServer).CreatePauseTemplate(ctx, req.(*CreatePauseTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PauseTemplateService_ReadPauseTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPauseTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PauseTemplateServiceServer).ReadPauseTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PauseTemplateService_ReadPauseTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PauseTemplateServiceServer).ReadPauseTemplate(ctx, req.(*ReadPauseTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PauseTemplateService_SearchPauseTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPauseTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PauseTemplateServiceServer).SearchPauseTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PauseTemplateService_SearchPauseTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PauseTemplateServiceServer).SearchPauseTemplate(ctx, req.(*SearchPauseTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PauseTemplateService_UpdatePauseTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePauseTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PauseTemplateServiceServer).UpdatePauseTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PauseTemplateService_UpdatePauseTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PauseTemplateServiceServer).UpdatePauseTemplate(ctx, req.(*UpdatePauseTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PauseTemplateService_DeletePauseTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePauseTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PauseTemplateServiceServer).DeletePauseTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PauseTemplateService_DeletePauseTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PauseTemplateServiceServer).DeletePauseTemplate(ctx, req.(*DeletePauseTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PauseTemplateService_ServiceDesc is the grpc.ServiceDesc for PauseTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PauseTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wfm.PauseTemplateService",
	HandlerType: (*PauseTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePauseTemplate",
			Handler:    _PauseTemplateService_CreatePauseTemplate_Handler,
		},
		{
			MethodName: "ReadPauseTemplate",
			Handler:    _PauseTemplateService_ReadPauseTemplate_Handler,
		},
		{
			MethodName: "SearchPauseTemplate",
			Handler:    _PauseTemplateService_SearchPauseTemplate_Handler,
		},
		{
			MethodName: "UpdatePauseTemplate",
			Handler:    _PauseTemplateService_UpdatePauseTemplate_Handler,
		},
		{
			MethodName: "DeletePauseTemplate",
			Handler:    _PauseTemplateService_DeletePauseTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pause_template.proto",
}
