// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: agent_working_schedule.proto

package wfm

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAgentsWorkingScheduleShiftsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateAgentsWorkingScheduleShiftsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateAgentsWorkingScheduleShiftsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateAgentsWorkingScheduleShiftsRequestMultiError, or nil if none found.
func (m *CreateAgentsWorkingScheduleShiftsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentsWorkingScheduleShiftsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkingScheduleId

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAgentsWorkingScheduleShiftsRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAgentsWorkingScheduleShiftsRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAgentsWorkingScheduleShiftsRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAgents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAgentsWorkingScheduleShiftsRequestValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAgentsWorkingScheduleShiftsRequestValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAgentsWorkingScheduleShiftsRequestValidationError{
					field:  fmt.Sprintf("Agents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]int64, len(m.GetItems()))
		i := 0
		for key := range m.GetItems() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetItems()[key]
			_ = val

			// no validation rules for Items[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateAgentsWorkingScheduleShiftsRequestValidationError{
							field:  fmt.Sprintf("Items[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateAgentsWorkingScheduleShiftsRequestValidationError{
							field:  fmt.Sprintf("Items[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateAgentsWorkingScheduleShiftsRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CreateAgentsWorkingScheduleShiftsRequestMultiError(errors)
	}

	return nil
}

// CreateAgentsWorkingScheduleShiftsRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateAgentsWorkingScheduleShiftsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAgentsWorkingScheduleShiftsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentsWorkingScheduleShiftsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentsWorkingScheduleShiftsRequestMultiError) AllErrors() []error { return m }

// CreateAgentsWorkingScheduleShiftsRequestValidationError is the validation
// error returned by CreateAgentsWorkingScheduleShiftsRequest.Validate if the
// designated constraints aren't met.
type CreateAgentsWorkingScheduleShiftsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentsWorkingScheduleShiftsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentsWorkingScheduleShiftsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentsWorkingScheduleShiftsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentsWorkingScheduleShiftsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentsWorkingScheduleShiftsRequestValidationError) ErrorName() string {
	return "CreateAgentsWorkingScheduleShiftsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentsWorkingScheduleShiftsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentsWorkingScheduleShiftsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentsWorkingScheduleShiftsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentsWorkingScheduleShiftsRequestValidationError{}

// Validate checks the field values on
// CreateAgentsWorkingScheduleShiftsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateAgentsWorkingScheduleShiftsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateAgentsWorkingScheduleShiftsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateAgentsWorkingScheduleShiftsResponseMultiError, or nil if none found.
func (m *CreateAgentsWorkingScheduleShiftsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentsWorkingScheduleShiftsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAgentsWorkingScheduleShiftsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAgentsWorkingScheduleShiftsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAgentsWorkingScheduleShiftsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateAgentsWorkingScheduleShiftsResponseMultiError(errors)
	}

	return nil
}

// CreateAgentsWorkingScheduleShiftsResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateAgentsWorkingScheduleShiftsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAgentsWorkingScheduleShiftsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentsWorkingScheduleShiftsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentsWorkingScheduleShiftsResponseMultiError) AllErrors() []error { return m }

// CreateAgentsWorkingScheduleShiftsResponseValidationError is the validation
// error returned by CreateAgentsWorkingScheduleShiftsResponse.Validate if the
// designated constraints aren't met.
type CreateAgentsWorkingScheduleShiftsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentsWorkingScheduleShiftsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentsWorkingScheduleShiftsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentsWorkingScheduleShiftsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentsWorkingScheduleShiftsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentsWorkingScheduleShiftsResponseValidationError) ErrorName() string {
	return "CreateAgentsWorkingScheduleShiftsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentsWorkingScheduleShiftsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentsWorkingScheduleShiftsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentsWorkingScheduleShiftsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentsWorkingScheduleShiftsResponseValidationError{}

// Validate checks the field values on SearchAgentsWorkingScheduleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SearchAgentsWorkingScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAgentsWorkingScheduleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchAgentsWorkingScheduleRequestMultiError, or nil if none found.
func (m *SearchAgentsWorkingScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAgentsWorkingScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkingScheduleId

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchAgentsWorkingScheduleRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchAgentsWorkingScheduleRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchAgentsWorkingScheduleRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Q != nil {
		// no validation rules for Q
	}

	if len(errors) > 0 {
		return SearchAgentsWorkingScheduleRequestMultiError(errors)
	}

	return nil
}

// SearchAgentsWorkingScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by
// SearchAgentsWorkingScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchAgentsWorkingScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAgentsWorkingScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAgentsWorkingScheduleRequestMultiError) AllErrors() []error { return m }

// SearchAgentsWorkingScheduleRequestValidationError is the validation error
// returned by SearchAgentsWorkingScheduleRequest.Validate if the designated
// constraints aren't met.
type SearchAgentsWorkingScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAgentsWorkingScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAgentsWorkingScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAgentsWorkingScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAgentsWorkingScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAgentsWorkingScheduleRequestValidationError) ErrorName() string {
	return "SearchAgentsWorkingScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAgentsWorkingScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAgentsWorkingScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAgentsWorkingScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAgentsWorkingScheduleRequestValidationError{}

// Validate checks the field values on SearchAgentsWorkingScheduleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SearchAgentsWorkingScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAgentsWorkingScheduleResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchAgentsWorkingScheduleResponseMultiError, or nil if none found.
func (m *SearchAgentsWorkingScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAgentsWorkingScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHolidays() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAgentsWorkingScheduleResponseValidationError{
						field:  fmt.Sprintf("Holidays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAgentsWorkingScheduleResponseValidationError{
						field:  fmt.Sprintf("Holidays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAgentsWorkingScheduleResponseValidationError{
					field:  fmt.Sprintf("Holidays[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAgentsWorkingScheduleResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAgentsWorkingScheduleResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAgentsWorkingScheduleResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return SearchAgentsWorkingScheduleResponseMultiError(errors)
	}

	return nil
}

// SearchAgentsWorkingScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by
// SearchAgentsWorkingScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchAgentsWorkingScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAgentsWorkingScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAgentsWorkingScheduleResponseMultiError) AllErrors() []error { return m }

// SearchAgentsWorkingScheduleResponseValidationError is the validation error
// returned by SearchAgentsWorkingScheduleResponse.Validate if the designated
// constraints aren't met.
type SearchAgentsWorkingScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAgentsWorkingScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAgentsWorkingScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAgentsWorkingScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAgentsWorkingScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAgentsWorkingScheduleResponseValidationError) ErrorName() string {
	return "SearchAgentsWorkingScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAgentsWorkingScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAgentsWorkingScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAgentsWorkingScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAgentsWorkingScheduleResponseValidationError{}

// Validate checks the field values on Holiday with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Holiday) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Holiday with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HolidayMultiError, or nil if none found.
func (m *Holiday) ValidateAll() error {
	return m.validate(true)
}

func (m *Holiday) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for Name

	if len(errors) > 0 {
		return HolidayMultiError(errors)
	}

	return nil
}

// HolidayMultiError is an error wrapping multiple validation errors returned
// by Holiday.ValidateAll() if the designated constraints aren't met.
type HolidayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HolidayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HolidayMultiError) AllErrors() []error { return m }

// HolidayValidationError is the validation error returned by Holiday.Validate
// if the designated constraints aren't met.
type HolidayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HolidayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HolidayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HolidayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HolidayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HolidayValidationError) ErrorName() string { return "HolidayValidationError" }

// Error satisfies the builtin error interface
func (e HolidayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHoliday.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HolidayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HolidayValidationError{}

// Validate checks the field values on AgentScheduleShiftPause with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AgentScheduleShiftPause) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentScheduleShiftPause with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgentScheduleShiftPauseMultiError, or nil if none found.
func (m *AgentScheduleShiftPause) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentScheduleShiftPause) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DomainId

	// no validation rules for CreatedAt

	if all {
		switch v := interface{}(m.GetCreatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgentScheduleShiftPauseValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgentScheduleShiftPauseValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgentScheduleShiftPauseValidationError{
				field:  "CreatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgentScheduleShiftPauseValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgentScheduleShiftPauseValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgentScheduleShiftPauseValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Start

	// no validation rules for End

	if m.Cause != nil {

		if all {
			switch v := interface{}(m.GetCause()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentScheduleShiftPauseValidationError{
						field:  "Cause",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentScheduleShiftPauseValidationError{
						field:  "Cause",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCause()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentScheduleShiftPauseValidationError{
					field:  "Cause",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AgentScheduleShiftPauseMultiError(errors)
	}

	return nil
}

// AgentScheduleShiftPauseMultiError is an error wrapping multiple validation
// errors returned by AgentScheduleShiftPause.ValidateAll() if the designated
// constraints aren't met.
type AgentScheduleShiftPauseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentScheduleShiftPauseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentScheduleShiftPauseMultiError) AllErrors() []error { return m }

// AgentScheduleShiftPauseValidationError is the validation error returned by
// AgentScheduleShiftPause.Validate if the designated constraints aren't met.
type AgentScheduleShiftPauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentScheduleShiftPauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentScheduleShiftPauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentScheduleShiftPauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentScheduleShiftPauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentScheduleShiftPauseValidationError) ErrorName() string {
	return "AgentScheduleShiftPauseValidationError"
}

// Error satisfies the builtin error interface
func (e AgentScheduleShiftPauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentScheduleShiftPause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentScheduleShiftPauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentScheduleShiftPauseValidationError{}

// Validate checks the field values on AgentScheduleShiftSkill with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AgentScheduleShiftSkill) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentScheduleShiftSkill with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgentScheduleShiftSkillMultiError, or nil if none found.
func (m *AgentScheduleShiftSkill) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentScheduleShiftSkill) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSkill()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgentScheduleShiftSkillValidationError{
					field:  "Skill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgentScheduleShiftSkillValidationError{
					field:  "Skill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSkill()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgentScheduleShiftSkillValidationError{
				field:  "Skill",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Capacity

	// no validation rules for Enabled

	if len(errors) > 0 {
		return AgentScheduleShiftSkillMultiError(errors)
	}

	return nil
}

// AgentScheduleShiftSkillMultiError is an error wrapping multiple validation
// errors returned by AgentScheduleShiftSkill.ValidateAll() if the designated
// constraints aren't met.
type AgentScheduleShiftSkillMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentScheduleShiftSkillMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentScheduleShiftSkillMultiError) AllErrors() []error { return m }

// AgentScheduleShiftSkillValidationError is the validation error returned by
// AgentScheduleShiftSkill.Validate if the designated constraints aren't met.
type AgentScheduleShiftSkillValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentScheduleShiftSkillValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentScheduleShiftSkillValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentScheduleShiftSkillValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentScheduleShiftSkillValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentScheduleShiftSkillValidationError) ErrorName() string {
	return "AgentScheduleShiftSkillValidationError"
}

// Error satisfies the builtin error interface
func (e AgentScheduleShiftSkillValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentScheduleShiftSkill.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentScheduleShiftSkillValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentScheduleShiftSkillValidationError{}

// Validate checks the field values on AgentScheduleShift with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AgentScheduleShift) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentScheduleShift with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgentScheduleShiftMultiError, or nil if none found.
func (m *AgentScheduleShift) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentScheduleShift) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DomainId

	// no validation rules for CreatedAt

	if all {
		switch v := interface{}(m.GetCreatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgentScheduleShiftValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgentScheduleShiftValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgentScheduleShiftValidationError{
				field:  "CreatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgentScheduleShiftValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgentScheduleShiftValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgentScheduleShiftValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Start

	// no validation rules for End

	for idx, item := range m.GetPauses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentScheduleShiftValidationError{
						field:  fmt.Sprintf("Pauses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentScheduleShiftValidationError{
						field:  fmt.Sprintf("Pauses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentScheduleShiftValidationError{
					field:  fmt.Sprintf("Pauses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSkills() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentScheduleShiftValidationError{
						field:  fmt.Sprintf("Skills[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentScheduleShiftValidationError{
						field:  fmt.Sprintf("Skills[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentScheduleShiftValidationError{
					field:  fmt.Sprintf("Skills[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AgentScheduleShiftMultiError(errors)
	}

	return nil
}

// AgentScheduleShiftMultiError is an error wrapping multiple validation errors
// returned by AgentScheduleShift.ValidateAll() if the designated constraints
// aren't met.
type AgentScheduleShiftMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentScheduleShiftMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentScheduleShiftMultiError) AllErrors() []error { return m }

// AgentScheduleShiftValidationError is the validation error returned by
// AgentScheduleShift.Validate if the designated constraints aren't met.
type AgentScheduleShiftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentScheduleShiftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentScheduleShiftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentScheduleShiftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentScheduleShiftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentScheduleShiftValidationError) ErrorName() string {
	return "AgentScheduleShiftValidationError"
}

// Error satisfies the builtin error interface
func (e AgentScheduleShiftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentScheduleShift.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentScheduleShiftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentScheduleShiftValidationError{}

// Validate checks the field values on AgentSchedule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AgentSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AgentScheduleMultiError, or
// nil if none found.
func (m *AgentSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for Locked

	switch v := m.Type.(type) {
	case *AgentSchedule_Absence:
		if v == nil {
			err := AgentScheduleValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Absence
	case *AgentSchedule_Shift:
		if v == nil {
			err := AgentScheduleValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShift()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentScheduleValidationError{
						field:  "Shift",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentScheduleValidationError{
						field:  "Shift",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShift()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentScheduleValidationError{
					field:  "Shift",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AgentScheduleMultiError(errors)
	}

	return nil
}

// AgentScheduleMultiError is an error wrapping multiple validation errors
// returned by AgentSchedule.ValidateAll() if the designated constraints
// aren't met.
type AgentScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentScheduleMultiError) AllErrors() []error { return m }

// AgentScheduleValidationError is the validation error returned by
// AgentSchedule.Validate if the designated constraints aren't met.
type AgentScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentScheduleValidationError) ErrorName() string { return "AgentScheduleValidationError" }

// Error satisfies the builtin error interface
func (e AgentScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentScheduleValidationError{}

// Validate checks the field values on AgentWorkingSchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AgentWorkingSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentWorkingSchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgentWorkingScheduleMultiError, or nil if none found.
func (m *AgentWorkingSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentWorkingSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgentWorkingScheduleValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgentWorkingScheduleValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgentWorkingScheduleValidationError{
				field:  "Agent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSchedule() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentWorkingScheduleValidationError{
						field:  fmt.Sprintf("Schedule[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentWorkingScheduleValidationError{
						field:  fmt.Sprintf("Schedule[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentWorkingScheduleValidationError{
					field:  fmt.Sprintf("Schedule[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AgentWorkingScheduleMultiError(errors)
	}

	return nil
}

// AgentWorkingScheduleMultiError is an error wrapping multiple validation
// errors returned by AgentWorkingSchedule.ValidateAll() if the designated
// constraints aren't met.
type AgentWorkingScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentWorkingScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentWorkingScheduleMultiError) AllErrors() []error { return m }

// AgentWorkingScheduleValidationError is the validation error returned by
// AgentWorkingSchedule.Validate if the designated constraints aren't met.
type AgentWorkingScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentWorkingScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentWorkingScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentWorkingScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentWorkingScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentWorkingScheduleValidationError) ErrorName() string {
	return "AgentWorkingScheduleValidationError"
}

// Error satisfies the builtin error interface
func (e AgentWorkingScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentWorkingSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentWorkingScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentWorkingScheduleValidationError{}
