// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: working_schedule.proto

package wfm

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateWorkingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkingScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkingScheduleRequestMultiError, or nil if none found.
func (m *CreateWorkingScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkingScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkingScheduleRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkingScheduleRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkingScheduleRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkingScheduleRequestMultiError(errors)
	}

	return nil
}

// CreateWorkingScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by CreateWorkingScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateWorkingScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkingScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkingScheduleRequestMultiError) AllErrors() []error { return m }

// CreateWorkingScheduleRequestValidationError is the validation error returned
// by CreateWorkingScheduleRequest.Validate if the designated constraints
// aren't met.
type CreateWorkingScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkingScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkingScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkingScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkingScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkingScheduleRequestValidationError) ErrorName() string {
	return "CreateWorkingScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkingScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkingScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkingScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkingScheduleRequestValidationError{}

// Validate checks the field values on CreateWorkingScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkingScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkingScheduleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWorkingScheduleResponseMultiError, or nil if none found.
func (m *CreateWorkingScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkingScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkingScheduleResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkingScheduleResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkingScheduleResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkingScheduleResponseMultiError(errors)
	}

	return nil
}

// CreateWorkingScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by CreateWorkingScheduleResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateWorkingScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkingScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkingScheduleResponseMultiError) AllErrors() []error { return m }

// CreateWorkingScheduleResponseValidationError is the validation error
// returned by CreateWorkingScheduleResponse.Validate if the designated
// constraints aren't met.
type CreateWorkingScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkingScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkingScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkingScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkingScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkingScheduleResponseValidationError) ErrorName() string {
	return "CreateWorkingScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkingScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkingScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkingScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkingScheduleResponseValidationError{}

// Validate checks the field values on ReadWorkingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadWorkingScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadWorkingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadWorkingScheduleRequestMultiError, or nil if none found.
func (m *ReadWorkingScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadWorkingScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ReadWorkingScheduleRequestMultiError(errors)
	}

	return nil
}

// ReadWorkingScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by ReadWorkingScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type ReadWorkingScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadWorkingScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadWorkingScheduleRequestMultiError) AllErrors() []error { return m }

// ReadWorkingScheduleRequestValidationError is the validation error returned
// by ReadWorkingScheduleRequest.Validate if the designated constraints aren't met.
type ReadWorkingScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadWorkingScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadWorkingScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadWorkingScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadWorkingScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadWorkingScheduleRequestValidationError) ErrorName() string {
	return "ReadWorkingScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadWorkingScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadWorkingScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadWorkingScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadWorkingScheduleRequestValidationError{}

// Validate checks the field values on ReadWorkingScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadWorkingScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadWorkingScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadWorkingScheduleResponseMultiError, or nil if none found.
func (m *ReadWorkingScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadWorkingScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadWorkingScheduleResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadWorkingScheduleResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadWorkingScheduleResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadWorkingScheduleResponseMultiError(errors)
	}

	return nil
}

// ReadWorkingScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by ReadWorkingScheduleResponse.ValidateAll() if
// the designated constraints aren't met.
type ReadWorkingScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadWorkingScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadWorkingScheduleResponseMultiError) AllErrors() []error { return m }

// ReadWorkingScheduleResponseValidationError is the validation error returned
// by ReadWorkingScheduleResponse.Validate if the designated constraints
// aren't met.
type ReadWorkingScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadWorkingScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadWorkingScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadWorkingScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadWorkingScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadWorkingScheduleResponseValidationError) ErrorName() string {
	return "ReadWorkingScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadWorkingScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadWorkingScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadWorkingScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadWorkingScheduleResponseValidationError{}

// Validate checks the field values on ReadWorkingScheduleForecastRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReadWorkingScheduleForecastRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadWorkingScheduleForecastRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadWorkingScheduleForecastRequestMultiError, or nil if none found.
func (m *ReadWorkingScheduleForecastRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadWorkingScheduleForecastRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadWorkingScheduleForecastRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadWorkingScheduleForecastRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadWorkingScheduleForecastRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadWorkingScheduleForecastRequestMultiError(errors)
	}

	return nil
}

// ReadWorkingScheduleForecastRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReadWorkingScheduleForecastRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadWorkingScheduleForecastRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadWorkingScheduleForecastRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadWorkingScheduleForecastRequestMultiError) AllErrors() []error { return m }

// ReadWorkingScheduleForecastRequestValidationError is the validation error
// returned by ReadWorkingScheduleForecastRequest.Validate if the designated
// constraints aren't met.
type ReadWorkingScheduleForecastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadWorkingScheduleForecastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadWorkingScheduleForecastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadWorkingScheduleForecastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadWorkingScheduleForecastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadWorkingScheduleForecastRequestValidationError) ErrorName() string {
	return "ReadWorkingScheduleForecastRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadWorkingScheduleForecastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadWorkingScheduleForecastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadWorkingScheduleForecastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadWorkingScheduleForecastRequestValidationError{}

// Validate checks the field values on ReadWorkingScheduleForecastResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReadWorkingScheduleForecastResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadWorkingScheduleForecastResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadWorkingScheduleForecastResponseMultiError, or nil if none found.
func (m *ReadWorkingScheduleForecastResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadWorkingScheduleForecastResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int64, len(m.GetItems()))
		i := 0
		for key := range m.GetItems() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetItems()[key]
			_ = val

			// no validation rules for Items[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ReadWorkingScheduleForecastResponseValidationError{
							field:  fmt.Sprintf("Items[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ReadWorkingScheduleForecastResponseValidationError{
							field:  fmt.Sprintf("Items[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ReadWorkingScheduleForecastResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ReadWorkingScheduleForecastResponseMultiError(errors)
	}

	return nil
}

// ReadWorkingScheduleForecastResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReadWorkingScheduleForecastResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadWorkingScheduleForecastResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadWorkingScheduleForecastResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadWorkingScheduleForecastResponseMultiError) AllErrors() []error { return m }

// ReadWorkingScheduleForecastResponseValidationError is the validation error
// returned by ReadWorkingScheduleForecastResponse.Validate if the designated
// constraints aren't met.
type ReadWorkingScheduleForecastResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadWorkingScheduleForecastResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadWorkingScheduleForecastResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadWorkingScheduleForecastResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadWorkingScheduleForecastResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadWorkingScheduleForecastResponseValidationError) ErrorName() string {
	return "ReadWorkingScheduleForecastResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadWorkingScheduleForecastResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadWorkingScheduleForecastResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadWorkingScheduleForecastResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadWorkingScheduleForecastResponseValidationError{}

// Validate checks the field values on SearchWorkingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchWorkingScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchWorkingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchWorkingScheduleRequestMultiError, or nil if none found.
func (m *SearchWorkingScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchWorkingScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Q != nil {
		// no validation rules for Q
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.Size != nil {
		// no validation rules for Size
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if len(errors) > 0 {
		return SearchWorkingScheduleRequestMultiError(errors)
	}

	return nil
}

// SearchWorkingScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by SearchWorkingScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type SearchWorkingScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchWorkingScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchWorkingScheduleRequestMultiError) AllErrors() []error { return m }

// SearchWorkingScheduleRequestValidationError is the validation error returned
// by SearchWorkingScheduleRequest.Validate if the designated constraints
// aren't met.
type SearchWorkingScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchWorkingScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchWorkingScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchWorkingScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchWorkingScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchWorkingScheduleRequestValidationError) ErrorName() string {
	return "SearchWorkingScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchWorkingScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchWorkingScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchWorkingScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchWorkingScheduleRequestValidationError{}

// Validate checks the field values on SearchWorkingScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchWorkingScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchWorkingScheduleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchWorkingScheduleResponseMultiError, or nil if none found.
func (m *SearchWorkingScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchWorkingScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchWorkingScheduleResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchWorkingScheduleResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchWorkingScheduleResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Next

	if len(errors) > 0 {
		return SearchWorkingScheduleResponseMultiError(errors)
	}

	return nil
}

// SearchWorkingScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by SearchWorkingScheduleResponse.ValidateAll()
// if the designated constraints aren't met.
type SearchWorkingScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchWorkingScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchWorkingScheduleResponseMultiError) AllErrors() []error { return m }

// SearchWorkingScheduleResponseValidationError is the validation error
// returned by SearchWorkingScheduleResponse.Validate if the designated
// constraints aren't met.
type SearchWorkingScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchWorkingScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchWorkingScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchWorkingScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchWorkingScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchWorkingScheduleResponseValidationError) ErrorName() string {
	return "SearchWorkingScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchWorkingScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchWorkingScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchWorkingScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchWorkingScheduleResponseValidationError{}

// Validate checks the field values on UpdateWorkingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkingScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkingScheduleRequestMultiError, or nil if none found.
func (m *UpdateWorkingScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkingScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkingScheduleRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkingScheduleRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkingScheduleRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkingScheduleRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkingScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWorkingScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateWorkingScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkingScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkingScheduleRequestMultiError) AllErrors() []error { return m }

// UpdateWorkingScheduleRequestValidationError is the validation error returned
// by UpdateWorkingScheduleRequest.Validate if the designated constraints
// aren't met.
type UpdateWorkingScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkingScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkingScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkingScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkingScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkingScheduleRequestValidationError) ErrorName() string {
	return "UpdateWorkingScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkingScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkingScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkingScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkingScheduleRequestValidationError{}

// Validate checks the field values on UpdateWorkingScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkingScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkingScheduleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWorkingScheduleResponseMultiError, or nil if none found.
func (m *UpdateWorkingScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkingScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkingScheduleResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkingScheduleResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkingScheduleResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkingScheduleResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkingScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateWorkingScheduleResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateWorkingScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkingScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkingScheduleResponseMultiError) AllErrors() []error { return m }

// UpdateWorkingScheduleResponseValidationError is the validation error
// returned by UpdateWorkingScheduleResponse.Validate if the designated
// constraints aren't met.
type UpdateWorkingScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkingScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkingScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkingScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkingScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkingScheduleResponseValidationError) ErrorName() string {
	return "UpdateWorkingScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkingScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkingScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkingScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkingScheduleResponseValidationError{}

// Validate checks the field values on UpdateWorkingScheduleAddAgentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateWorkingScheduleAddAgentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkingScheduleAddAgentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateWorkingScheduleAddAgentsRequestMultiError, or nil if none found.
func (m *UpdateWorkingScheduleAddAgentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkingScheduleAddAgentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetAgents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateWorkingScheduleAddAgentsRequestValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateWorkingScheduleAddAgentsRequestValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateWorkingScheduleAddAgentsRequestValidationError{
					field:  fmt.Sprintf("Agents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateWorkingScheduleAddAgentsRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkingScheduleAddAgentsRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateWorkingScheduleAddAgentsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkingScheduleAddAgentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkingScheduleAddAgentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkingScheduleAddAgentsRequestMultiError) AllErrors() []error { return m }

// UpdateWorkingScheduleAddAgentsRequestValidationError is the validation error
// returned by UpdateWorkingScheduleAddAgentsRequest.Validate if the
// designated constraints aren't met.
type UpdateWorkingScheduleAddAgentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkingScheduleAddAgentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkingScheduleAddAgentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkingScheduleAddAgentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkingScheduleAddAgentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkingScheduleAddAgentsRequestValidationError) ErrorName() string {
	return "UpdateWorkingScheduleAddAgentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkingScheduleAddAgentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkingScheduleAddAgentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkingScheduleAddAgentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkingScheduleAddAgentsRequestValidationError{}

// Validate checks the field values on UpdateWorkingScheduleAddAgentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateWorkingScheduleAddAgentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateWorkingScheduleAddAgentsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateWorkingScheduleAddAgentsResponseMultiError, or nil if none found.
func (m *UpdateWorkingScheduleAddAgentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkingScheduleAddAgentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAgents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateWorkingScheduleAddAgentsResponseValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateWorkingScheduleAddAgentsResponseValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateWorkingScheduleAddAgentsResponseValidationError{
					field:  fmt.Sprintf("Agents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateWorkingScheduleAddAgentsResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkingScheduleAddAgentsResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateWorkingScheduleAddAgentsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkingScheduleAddAgentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkingScheduleAddAgentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkingScheduleAddAgentsResponseMultiError) AllErrors() []error { return m }

// UpdateWorkingScheduleAddAgentsResponseValidationError is the validation
// error returned by UpdateWorkingScheduleAddAgentsResponse.Validate if the
// designated constraints aren't met.
type UpdateWorkingScheduleAddAgentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkingScheduleAddAgentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkingScheduleAddAgentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkingScheduleAddAgentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkingScheduleAddAgentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkingScheduleAddAgentsResponseValidationError) ErrorName() string {
	return "UpdateWorkingScheduleAddAgentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkingScheduleAddAgentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkingScheduleAddAgentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkingScheduleAddAgentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkingScheduleAddAgentsResponseValidationError{}

// Validate checks the field values on UpdateWorkingScheduleRemoveAgentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateWorkingScheduleRemoveAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateWorkingScheduleRemoveAgentRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateWorkingScheduleRemoveAgentRequestMultiError, or nil if none found.
func (m *UpdateWorkingScheduleRemoveAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkingScheduleRemoveAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AgentId

	if len(errors) > 0 {
		return UpdateWorkingScheduleRemoveAgentRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkingScheduleRemoveAgentRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateWorkingScheduleRemoveAgentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkingScheduleRemoveAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkingScheduleRemoveAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkingScheduleRemoveAgentRequestMultiError) AllErrors() []error { return m }

// UpdateWorkingScheduleRemoveAgentRequestValidationError is the validation
// error returned by UpdateWorkingScheduleRemoveAgentRequest.Validate if the
// designated constraints aren't met.
type UpdateWorkingScheduleRemoveAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkingScheduleRemoveAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkingScheduleRemoveAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkingScheduleRemoveAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkingScheduleRemoveAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkingScheduleRemoveAgentRequestValidationError) ErrorName() string {
	return "UpdateWorkingScheduleRemoveAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkingScheduleRemoveAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkingScheduleRemoveAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkingScheduleRemoveAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkingScheduleRemoveAgentRequestValidationError{}

// Validate checks the field values on UpdateWorkingScheduleRemoveAgentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateWorkingScheduleRemoveAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateWorkingScheduleRemoveAgentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateWorkingScheduleRemoveAgentResponseMultiError, or nil if none found.
func (m *UpdateWorkingScheduleRemoveAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkingScheduleRemoveAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateWorkingScheduleRemoveAgentResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkingScheduleRemoveAgentResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateWorkingScheduleRemoveAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkingScheduleRemoveAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkingScheduleRemoveAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkingScheduleRemoveAgentResponseMultiError) AllErrors() []error { return m }

// UpdateWorkingScheduleRemoveAgentResponseValidationError is the validation
// error returned by UpdateWorkingScheduleRemoveAgentResponse.Validate if the
// designated constraints aren't met.
type UpdateWorkingScheduleRemoveAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkingScheduleRemoveAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkingScheduleRemoveAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkingScheduleRemoveAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkingScheduleRemoveAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkingScheduleRemoveAgentResponseValidationError) ErrorName() string {
	return "UpdateWorkingScheduleRemoveAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkingScheduleRemoveAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkingScheduleRemoveAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkingScheduleRemoveAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkingScheduleRemoveAgentResponseValidationError{}

// Validate checks the field values on DeleteWorkingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkingScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkingScheduleRequestMultiError, or nil if none found.
func (m *DeleteWorkingScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkingScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteWorkingScheduleRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkingScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteWorkingScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteWorkingScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkingScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkingScheduleRequestMultiError) AllErrors() []error { return m }

// DeleteWorkingScheduleRequestValidationError is the validation error returned
// by DeleteWorkingScheduleRequest.Validate if the designated constraints
// aren't met.
type DeleteWorkingScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkingScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkingScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkingScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkingScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkingScheduleRequestValidationError) ErrorName() string {
	return "DeleteWorkingScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkingScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkingScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkingScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkingScheduleRequestValidationError{}

// Validate checks the field values on DeleteWorkingScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkingScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkingScheduleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteWorkingScheduleResponseMultiError, or nil if none found.
func (m *DeleteWorkingScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkingScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteWorkingScheduleResponseMultiError(errors)
	}

	return nil
}

// DeleteWorkingScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteWorkingScheduleResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteWorkingScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkingScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkingScheduleResponseMultiError) AllErrors() []error { return m }

// DeleteWorkingScheduleResponseValidationError is the validation error
// returned by DeleteWorkingScheduleResponse.Validate if the designated
// constraints aren't met.
type DeleteWorkingScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkingScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkingScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkingScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkingScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkingScheduleResponseValidationError) ErrorName() string {
	return "DeleteWorkingScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkingScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkingScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkingScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkingScheduleResponseValidationError{}

// Validate checks the field values on WorkingScheduleForecast with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkingScheduleForecast) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkingScheduleForecast with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkingScheduleForecastMultiError, or nil if none found.
func (m *WorkingScheduleForecast) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkingScheduleForecast) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetForecast() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkingScheduleForecastValidationError{
						field:  fmt.Sprintf("Forecast[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkingScheduleForecastValidationError{
						field:  fmt.Sprintf("Forecast[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkingScheduleForecastValidationError{
					field:  fmt.Sprintf("Forecast[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorkingScheduleForecastMultiError(errors)
	}

	return nil
}

// WorkingScheduleForecastMultiError is an error wrapping multiple validation
// errors returned by WorkingScheduleForecast.ValidateAll() if the designated
// constraints aren't met.
type WorkingScheduleForecastMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkingScheduleForecastMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkingScheduleForecastMultiError) AllErrors() []error { return m }

// WorkingScheduleForecastValidationError is the validation error returned by
// WorkingScheduleForecast.Validate if the designated constraints aren't met.
type WorkingScheduleForecastValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkingScheduleForecastValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkingScheduleForecastValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkingScheduleForecastValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkingScheduleForecastValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkingScheduleForecastValidationError) ErrorName() string {
	return "WorkingScheduleForecastValidationError"
}

// Error satisfies the builtin error interface
func (e WorkingScheduleForecastValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkingScheduleForecast.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkingScheduleForecastValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkingScheduleForecastValidationError{}

// Validate checks the field values on WorkingSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkingSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkingSchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkingScheduleMultiError, or nil if none found.
func (m *WorkingSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkingSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DomainId

	// no validation rules for CreatedAt

	if all {
		switch v := interface{}(m.GetCreatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkingScheduleValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkingScheduleValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkingScheduleValidationError{
				field:  "CreatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkingScheduleValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkingScheduleValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkingScheduleValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetTeam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkingScheduleValidationError{
					field:  "Team",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkingScheduleValidationError{
					field:  "Team",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkingScheduleValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCalendar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkingScheduleValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkingScheduleValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkingScheduleValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartDateAt

	// no validation rules for EndDateAt

	// no validation rules for StartTimeAt

	// no validation rules for EndTimeAt

	for idx, item := range m.GetExtraSkills() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkingScheduleValidationError{
						field:  fmt.Sprintf("ExtraSkills[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkingScheduleValidationError{
						field:  fmt.Sprintf("ExtraSkills[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkingScheduleValidationError{
					field:  fmt.Sprintf("ExtraSkills[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for BlockOutsideActivity

	for idx, item := range m.GetAgents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkingScheduleValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkingScheduleValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkingScheduleValidationError{
					field:  fmt.Sprintf("Agents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalAgents

	if len(errors) > 0 {
		return WorkingScheduleMultiError(errors)
	}

	return nil
}

// WorkingScheduleMultiError is an error wrapping multiple validation errors
// returned by WorkingSchedule.ValidateAll() if the designated constraints
// aren't met.
type WorkingScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkingScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkingScheduleMultiError) AllErrors() []error { return m }

// WorkingScheduleValidationError is the validation error returned by
// WorkingSchedule.Validate if the designated constraints aren't met.
type WorkingScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkingScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkingScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkingScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkingScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkingScheduleValidationError) ErrorName() string { return "WorkingScheduleValidationError" }

// Error satisfies the builtin error interface
func (e WorkingScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkingSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkingScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkingScheduleValidationError{}

// Validate checks the field values on WorkingScheduleForecast_Forecast with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WorkingScheduleForecast_Forecast) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkingScheduleForecast_Forecast with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WorkingScheduleForecast_ForecastMultiError, or nil if none found.
func (m *WorkingScheduleForecast_Forecast) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkingScheduleForecast_Forecast) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hour

	// no validation rules for Agents

	if len(errors) > 0 {
		return WorkingScheduleForecast_ForecastMultiError(errors)
	}

	return nil
}

// WorkingScheduleForecast_ForecastMultiError is an error wrapping multiple
// validation errors returned by
// WorkingScheduleForecast_Forecast.ValidateAll() if the designated
// constraints aren't met.
type WorkingScheduleForecast_ForecastMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkingScheduleForecast_ForecastMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkingScheduleForecast_ForecastMultiError) AllErrors() []error { return m }

// WorkingScheduleForecast_ForecastValidationError is the validation error
// returned by WorkingScheduleForecast_Forecast.Validate if the designated
// constraints aren't met.
type WorkingScheduleForecast_ForecastValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkingScheduleForecast_ForecastValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkingScheduleForecast_ForecastValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkingScheduleForecast_ForecastValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkingScheduleForecast_ForecastValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkingScheduleForecast_ForecastValidationError) ErrorName() string {
	return "WorkingScheduleForecast_ForecastValidationError"
}

// Error satisfies the builtin error interface
func (e WorkingScheduleForecast_ForecastValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkingScheduleForecast_Forecast.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkingScheduleForecast_ForecastValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkingScheduleForecast_ForecastValidationError{}
