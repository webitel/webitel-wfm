// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pause_template.proto

package wfm

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePauseTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePauseTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePauseTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePauseTemplateRequestMultiError, or nil if none found.
func (m *CreatePauseTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePauseTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePauseTemplateRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePauseTemplateRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePauseTemplateRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePauseTemplateRequestMultiError(errors)
	}

	return nil
}

// CreatePauseTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePauseTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePauseTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePauseTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePauseTemplateRequestMultiError) AllErrors() []error { return m }

// CreatePauseTemplateRequestValidationError is the validation error returned
// by CreatePauseTemplateRequest.Validate if the designated constraints aren't met.
type CreatePauseTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePauseTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePauseTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePauseTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePauseTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePauseTemplateRequestValidationError) ErrorName() string {
	return "CreatePauseTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePauseTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePauseTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePauseTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePauseTemplateRequestValidationError{}

// Validate checks the field values on CreatePauseTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePauseTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePauseTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePauseTemplateResponseMultiError, or nil if none found.
func (m *CreatePauseTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePauseTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePauseTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePauseTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePauseTemplateResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePauseTemplateResponseMultiError(errors)
	}

	return nil
}

// CreatePauseTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePauseTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePauseTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePauseTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePauseTemplateResponseMultiError) AllErrors() []error { return m }

// CreatePauseTemplateResponseValidationError is the validation error returned
// by CreatePauseTemplateResponse.Validate if the designated constraints
// aren't met.
type CreatePauseTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePauseTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePauseTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePauseTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePauseTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePauseTemplateResponseValidationError) ErrorName() string {
	return "CreatePauseTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePauseTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePauseTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePauseTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePauseTemplateResponseValidationError{}

// Validate checks the field values on ReadPauseTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadPauseTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadPauseTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadPauseTemplateRequestMultiError, or nil if none found.
func (m *ReadPauseTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadPauseTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ReadPauseTemplateRequestMultiError(errors)
	}

	return nil
}

// ReadPauseTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by ReadPauseTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadPauseTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadPauseTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadPauseTemplateRequestMultiError) AllErrors() []error { return m }

// ReadPauseTemplateRequestValidationError is the validation error returned by
// ReadPauseTemplateRequest.Validate if the designated constraints aren't met.
type ReadPauseTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadPauseTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadPauseTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadPauseTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadPauseTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadPauseTemplateRequestValidationError) ErrorName() string {
	return "ReadPauseTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadPauseTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadPauseTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadPauseTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadPauseTemplateRequestValidationError{}

// Validate checks the field values on ReadPauseTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadPauseTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadPauseTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadPauseTemplateResponseMultiError, or nil if none found.
func (m *ReadPauseTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadPauseTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadPauseTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadPauseTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadPauseTemplateResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadPauseTemplateResponseMultiError(errors)
	}

	return nil
}

// ReadPauseTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by ReadPauseTemplateResponse.ValidateAll() if the
// designated constraints aren't met.
type ReadPauseTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadPauseTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadPauseTemplateResponseMultiError) AllErrors() []error { return m }

// ReadPauseTemplateResponseValidationError is the validation error returned by
// ReadPauseTemplateResponse.Validate if the designated constraints aren't met.
type ReadPauseTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadPauseTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadPauseTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadPauseTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadPauseTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadPauseTemplateResponseValidationError) ErrorName() string {
	return "ReadPauseTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadPauseTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadPauseTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadPauseTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadPauseTemplateResponseValidationError{}

// Validate checks the field values on SearchPauseTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchPauseTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchPauseTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchPauseTemplateRequestMultiError, or nil if none found.
func (m *SearchPauseTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchPauseTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Q != nil {
		// no validation rules for Q
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.Size != nil {
		// no validation rules for Size
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if len(errors) > 0 {
		return SearchPauseTemplateRequestMultiError(errors)
	}

	return nil
}

// SearchPauseTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by SearchPauseTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type SearchPauseTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchPauseTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchPauseTemplateRequestMultiError) AllErrors() []error { return m }

// SearchPauseTemplateRequestValidationError is the validation error returned
// by SearchPauseTemplateRequest.Validate if the designated constraints aren't met.
type SearchPauseTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchPauseTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchPauseTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchPauseTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchPauseTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchPauseTemplateRequestValidationError) ErrorName() string {
	return "SearchPauseTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchPauseTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchPauseTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchPauseTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchPauseTemplateRequestValidationError{}

// Validate checks the field values on SearchPauseTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchPauseTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchPauseTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchPauseTemplateResponseMultiError, or nil if none found.
func (m *SearchPauseTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchPauseTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchPauseTemplateResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchPauseTemplateResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchPauseTemplateResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Next

	if len(errors) > 0 {
		return SearchPauseTemplateResponseMultiError(errors)
	}

	return nil
}

// SearchPauseTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by SearchPauseTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchPauseTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchPauseTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchPauseTemplateResponseMultiError) AllErrors() []error { return m }

// SearchPauseTemplateResponseValidationError is the validation error returned
// by SearchPauseTemplateResponse.Validate if the designated constraints
// aren't met.
type SearchPauseTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchPauseTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchPauseTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchPauseTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchPauseTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchPauseTemplateResponseValidationError) ErrorName() string {
	return "SearchPauseTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchPauseTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchPauseTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchPauseTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchPauseTemplateResponseValidationError{}

// Validate checks the field values on UpdatePauseTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePauseTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePauseTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePauseTemplateRequestMultiError, or nil if none found.
func (m *UpdatePauseTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePauseTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePauseTemplateRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePauseTemplateRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePauseTemplateRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePauseTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdatePauseTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePauseTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePauseTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePauseTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePauseTemplateRequestMultiError) AllErrors() []error { return m }

// UpdatePauseTemplateRequestValidationError is the validation error returned
// by UpdatePauseTemplateRequest.Validate if the designated constraints aren't met.
type UpdatePauseTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePauseTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePauseTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePauseTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePauseTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePauseTemplateRequestValidationError) ErrorName() string {
	return "UpdatePauseTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePauseTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePauseTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePauseTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePauseTemplateRequestValidationError{}

// Validate checks the field values on UpdatePauseTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePauseTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePauseTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePauseTemplateResponseMultiError, or nil if none found.
func (m *UpdatePauseTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePauseTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePauseTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePauseTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePauseTemplateResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePauseTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdatePauseTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePauseTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdatePauseTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePauseTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePauseTemplateResponseMultiError) AllErrors() []error { return m }

// UpdatePauseTemplateResponseValidationError is the validation error returned
// by UpdatePauseTemplateResponse.Validate if the designated constraints
// aren't met.
type UpdatePauseTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePauseTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePauseTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePauseTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePauseTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePauseTemplateResponseValidationError) ErrorName() string {
	return "UpdatePauseTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePauseTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePauseTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePauseTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePauseTemplateResponseValidationError{}

// Validate checks the field values on DeletePauseTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePauseTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePauseTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePauseTemplateRequestMultiError, or nil if none found.
func (m *DeletePauseTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePauseTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePauseTemplateRequestMultiError(errors)
	}

	return nil
}

// DeletePauseTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePauseTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type DeletePauseTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePauseTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePauseTemplateRequestMultiError) AllErrors() []error { return m }

// DeletePauseTemplateRequestValidationError is the validation error returned
// by DeletePauseTemplateRequest.Validate if the designated constraints aren't met.
type DeletePauseTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePauseTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePauseTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePauseTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePauseTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePauseTemplateRequestValidationError) ErrorName() string {
	return "DeletePauseTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePauseTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePauseTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePauseTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePauseTemplateRequestValidationError{}

// Validate checks the field values on DeletePauseTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePauseTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePauseTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePauseTemplateResponseMultiError, or nil if none found.
func (m *DeletePauseTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePauseTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePauseTemplateResponseMultiError(errors)
	}

	return nil
}

// DeletePauseTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by DeletePauseTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type DeletePauseTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePauseTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePauseTemplateResponseMultiError) AllErrors() []error { return m }

// DeletePauseTemplateResponseValidationError is the validation error returned
// by DeletePauseTemplateResponse.Validate if the designated constraints
// aren't met.
type DeletePauseTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePauseTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePauseTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePauseTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePauseTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePauseTemplateResponseValidationError) ErrorName() string {
	return "DeletePauseTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePauseTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePauseTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePauseTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePauseTemplateResponseValidationError{}

// Validate checks the field values on PauseTemplateCause with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PauseTemplateCause) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseTemplateCause with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PauseTemplateCauseMultiError, or nil if none found.
func (m *PauseTemplateCause) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseTemplateCause) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Duration

	if m.Cause != nil {

		if all {
			switch v := interface{}(m.GetCause()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PauseTemplateCauseValidationError{
						field:  "Cause",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PauseTemplateCauseValidationError{
						field:  "Cause",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCause()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PauseTemplateCauseValidationError{
					field:  "Cause",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PauseTemplateCauseMultiError(errors)
	}

	return nil
}

// PauseTemplateCauseMultiError is an error wrapping multiple validation errors
// returned by PauseTemplateCause.ValidateAll() if the designated constraints
// aren't met.
type PauseTemplateCauseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseTemplateCauseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseTemplateCauseMultiError) AllErrors() []error { return m }

// PauseTemplateCauseValidationError is the validation error returned by
// PauseTemplateCause.Validate if the designated constraints aren't met.
type PauseTemplateCauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseTemplateCauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseTemplateCauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseTemplateCauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseTemplateCauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseTemplateCauseValidationError) ErrorName() string {
	return "PauseTemplateCauseValidationError"
}

// Error satisfies the builtin error interface
func (e PauseTemplateCauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseTemplateCause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseTemplateCauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseTemplateCauseValidationError{}

// Validate checks the field values on PauseTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PauseTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PauseTemplateMultiError, or
// nil if none found.
func (m *PauseTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DomainId

	// no validation rules for CreatedAt

	if all {
		switch v := interface{}(m.GetCreatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PauseTemplateValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PauseTemplateValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PauseTemplateValidationError{
				field:  "CreatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PauseTemplateValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PauseTemplateValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PauseTemplateValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	for idx, item := range m.GetCauses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PauseTemplateValidationError{
						field:  fmt.Sprintf("Causes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PauseTemplateValidationError{
						field:  fmt.Sprintf("Causes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PauseTemplateValidationError{
					field:  fmt.Sprintf("Causes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return PauseTemplateMultiError(errors)
	}

	return nil
}

// PauseTemplateMultiError is an error wrapping multiple validation errors
// returned by PauseTemplate.ValidateAll() if the designated constraints
// aren't met.
type PauseTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseTemplateMultiError) AllErrors() []error { return m }

// PauseTemplateValidationError is the validation error returned by
// PauseTemplate.Validate if the designated constraints aren't met.
type PauseTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseTemplateValidationError) ErrorName() string { return "PauseTemplateValidationError" }

// Error satisfies the builtin error interface
func (e PauseTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseTemplateValidationError{}
