// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: agent_working_conditions.proto

package wfm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentWorkingConditionsService_ReadAgentWorkingConditions_FullMethodName   = "/wfm.AgentWorkingConditionsService/ReadAgentWorkingConditions"
	AgentWorkingConditionsService_UpdateAgentWorkingConditions_FullMethodName = "/wfm.AgentWorkingConditionsService/UpdateAgentWorkingConditions"
)

// AgentWorkingConditionsServiceClient is the client API for AgentWorkingConditionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentWorkingConditionsServiceClient interface {
	ReadAgentWorkingConditions(ctx context.Context, in *ReadAgentWorkingConditionsRequest, opts ...grpc.CallOption) (*ReadAgentWorkingConditionsResponse, error)
	UpdateAgentWorkingConditions(ctx context.Context, in *UpdateAgentWorkingConditionsRequest, opts ...grpc.CallOption) (*UpdateAgentWorkingConditionsResponse, error)
}

type agentWorkingConditionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentWorkingConditionsServiceClient(cc grpc.ClientConnInterface) AgentWorkingConditionsServiceClient {
	return &agentWorkingConditionsServiceClient{cc}
}

func (c *agentWorkingConditionsServiceClient) ReadAgentWorkingConditions(ctx context.Context, in *ReadAgentWorkingConditionsRequest, opts ...grpc.CallOption) (*ReadAgentWorkingConditionsResponse, error) {
	out := new(ReadAgentWorkingConditionsResponse)
	err := c.cc.Invoke(ctx, AgentWorkingConditionsService_ReadAgentWorkingConditions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentWorkingConditionsServiceClient) UpdateAgentWorkingConditions(ctx context.Context, in *UpdateAgentWorkingConditionsRequest, opts ...grpc.CallOption) (*UpdateAgentWorkingConditionsResponse, error) {
	out := new(UpdateAgentWorkingConditionsResponse)
	err := c.cc.Invoke(ctx, AgentWorkingConditionsService_UpdateAgentWorkingConditions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentWorkingConditionsServiceServer is the server API for AgentWorkingConditionsService service.
// All implementations must embed UnimplementedAgentWorkingConditionsServiceServer
// for forward compatibility
type AgentWorkingConditionsServiceServer interface {
	ReadAgentWorkingConditions(context.Context, *ReadAgentWorkingConditionsRequest) (*ReadAgentWorkingConditionsResponse, error)
	UpdateAgentWorkingConditions(context.Context, *UpdateAgentWorkingConditionsRequest) (*UpdateAgentWorkingConditionsResponse, error)
	mustEmbedUnimplementedAgentWorkingConditionsServiceServer()
}

// UnimplementedAgentWorkingConditionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentWorkingConditionsServiceServer struct {
}

func (UnimplementedAgentWorkingConditionsServiceServer) ReadAgentWorkingConditions(context.Context, *ReadAgentWorkingConditionsRequest) (*ReadAgentWorkingConditionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAgentWorkingConditions not implemented")
}
func (UnimplementedAgentWorkingConditionsServiceServer) UpdateAgentWorkingConditions(context.Context, *UpdateAgentWorkingConditionsRequest) (*UpdateAgentWorkingConditionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentWorkingConditions not implemented")
}
func (UnimplementedAgentWorkingConditionsServiceServer) mustEmbedUnimplementedAgentWorkingConditionsServiceServer() {
}

// UnsafeAgentWorkingConditionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentWorkingConditionsServiceServer will
// result in compilation errors.
type UnsafeAgentWorkingConditionsServiceServer interface {
	mustEmbedUnimplementedAgentWorkingConditionsServiceServer()
}

func RegisterAgentWorkingConditionsServiceServer(s grpc.ServiceRegistrar, srv AgentWorkingConditionsServiceServer) {
	s.RegisterService(&AgentWorkingConditionsService_ServiceDesc, srv)
}

func _AgentWorkingConditionsService_ReadAgentWorkingConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAgentWorkingConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentWorkingConditionsServiceServer).ReadAgentWorkingConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentWorkingConditionsService_ReadAgentWorkingConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentWorkingConditionsServiceServer).ReadAgentWorkingConditions(ctx, req.(*ReadAgentWorkingConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentWorkingConditionsService_UpdateAgentWorkingConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentWorkingConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentWorkingConditionsServiceServer).UpdateAgentWorkingConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentWorkingConditionsService_UpdateAgentWorkingConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentWorkingConditionsServiceServer).UpdateAgentWorkingConditions(ctx, req.(*UpdateAgentWorkingConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentWorkingConditionsService_ServiceDesc is the grpc.ServiceDesc for AgentWorkingConditionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentWorkingConditionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wfm.AgentWorkingConditionsService",
	HandlerType: (*AgentWorkingConditionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAgentWorkingConditions",
			Handler:    _AgentWorkingConditionsService_ReadAgentWorkingConditions_Handler,
		},
		{
			MethodName: "UpdateAgentWorkingConditions",
			Handler:    _AgentWorkingConditionsService_UpdateAgentWorkingConditions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_working_conditions.proto",
}
