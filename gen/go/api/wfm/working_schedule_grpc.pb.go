// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: working_schedule.proto

package wfm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkingScheduleService_CreateWorkingSchedule_FullMethodName            = "/wfm.WorkingScheduleService/CreateWorkingSchedule"
	WorkingScheduleService_ReadWorkingSchedule_FullMethodName              = "/wfm.WorkingScheduleService/ReadWorkingSchedule"
	WorkingScheduleService_ReadWorkingScheduleForecast_FullMethodName      = "/wfm.WorkingScheduleService/ReadWorkingScheduleForecast"
	WorkingScheduleService_SearchWorkingSchedule_FullMethodName            = "/wfm.WorkingScheduleService/SearchWorkingSchedule"
	WorkingScheduleService_UpdateWorkingSchedule_FullMethodName            = "/wfm.WorkingScheduleService/UpdateWorkingSchedule"
	WorkingScheduleService_UpdateWorkingScheduleAddAgents_FullMethodName   = "/wfm.WorkingScheduleService/UpdateWorkingScheduleAddAgents"
	WorkingScheduleService_UpdateWorkingScheduleRemoveAgent_FullMethodName = "/wfm.WorkingScheduleService/UpdateWorkingScheduleRemoveAgent"
	WorkingScheduleService_DeleteWorkingSchedule_FullMethodName            = "/wfm.WorkingScheduleService/DeleteWorkingSchedule"
)

// WorkingScheduleServiceClient is the client API for WorkingScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkingScheduleServiceClient interface {
	CreateWorkingSchedule(ctx context.Context, in *CreateWorkingScheduleRequest, opts ...grpc.CallOption) (*CreateWorkingScheduleResponse, error)
	ReadWorkingSchedule(ctx context.Context, in *ReadWorkingScheduleRequest, opts ...grpc.CallOption) (*ReadWorkingScheduleResponse, error)
	ReadWorkingScheduleForecast(ctx context.Context, in *ReadWorkingScheduleForecastRequest, opts ...grpc.CallOption) (*ReadWorkingScheduleForecastResponse, error)
	SearchWorkingSchedule(ctx context.Context, in *SearchWorkingScheduleRequest, opts ...grpc.CallOption) (*SearchWorkingScheduleResponse, error)
	UpdateWorkingSchedule(ctx context.Context, in *UpdateWorkingScheduleRequest, opts ...grpc.CallOption) (*UpdateWorkingScheduleResponse, error)
	UpdateWorkingScheduleAddAgents(ctx context.Context, in *UpdateWorkingScheduleAddAgentsRequest, opts ...grpc.CallOption) (*UpdateWorkingScheduleAddAgentsResponse, error)
	UpdateWorkingScheduleRemoveAgent(ctx context.Context, in *UpdateWorkingScheduleRemoveAgentRequest, opts ...grpc.CallOption) (*UpdateWorkingScheduleRemoveAgentResponse, error)
	DeleteWorkingSchedule(ctx context.Context, in *DeleteWorkingScheduleRequest, opts ...grpc.CallOption) (*DeleteWorkingScheduleResponse, error)
}

type workingScheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkingScheduleServiceClient(cc grpc.ClientConnInterface) WorkingScheduleServiceClient {
	return &workingScheduleServiceClient{cc}
}

func (c *workingScheduleServiceClient) CreateWorkingSchedule(ctx context.Context, in *CreateWorkingScheduleRequest, opts ...grpc.CallOption) (*CreateWorkingScheduleResponse, error) {
	out := new(CreateWorkingScheduleResponse)
	err := c.cc.Invoke(ctx, WorkingScheduleService_CreateWorkingSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingScheduleServiceClient) ReadWorkingSchedule(ctx context.Context, in *ReadWorkingScheduleRequest, opts ...grpc.CallOption) (*ReadWorkingScheduleResponse, error) {
	out := new(ReadWorkingScheduleResponse)
	err := c.cc.Invoke(ctx, WorkingScheduleService_ReadWorkingSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingScheduleServiceClient) ReadWorkingScheduleForecast(ctx context.Context, in *ReadWorkingScheduleForecastRequest, opts ...grpc.CallOption) (*ReadWorkingScheduleForecastResponse, error) {
	out := new(ReadWorkingScheduleForecastResponse)
	err := c.cc.Invoke(ctx, WorkingScheduleService_ReadWorkingScheduleForecast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingScheduleServiceClient) SearchWorkingSchedule(ctx context.Context, in *SearchWorkingScheduleRequest, opts ...grpc.CallOption) (*SearchWorkingScheduleResponse, error) {
	out := new(SearchWorkingScheduleResponse)
	err := c.cc.Invoke(ctx, WorkingScheduleService_SearchWorkingSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingScheduleServiceClient) UpdateWorkingSchedule(ctx context.Context, in *UpdateWorkingScheduleRequest, opts ...grpc.CallOption) (*UpdateWorkingScheduleResponse, error) {
	out := new(UpdateWorkingScheduleResponse)
	err := c.cc.Invoke(ctx, WorkingScheduleService_UpdateWorkingSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingScheduleServiceClient) UpdateWorkingScheduleAddAgents(ctx context.Context, in *UpdateWorkingScheduleAddAgentsRequest, opts ...grpc.CallOption) (*UpdateWorkingScheduleAddAgentsResponse, error) {
	out := new(UpdateWorkingScheduleAddAgentsResponse)
	err := c.cc.Invoke(ctx, WorkingScheduleService_UpdateWorkingScheduleAddAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingScheduleServiceClient) UpdateWorkingScheduleRemoveAgent(ctx context.Context, in *UpdateWorkingScheduleRemoveAgentRequest, opts ...grpc.CallOption) (*UpdateWorkingScheduleRemoveAgentResponse, error) {
	out := new(UpdateWorkingScheduleRemoveAgentResponse)
	err := c.cc.Invoke(ctx, WorkingScheduleService_UpdateWorkingScheduleRemoveAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingScheduleServiceClient) DeleteWorkingSchedule(ctx context.Context, in *DeleteWorkingScheduleRequest, opts ...grpc.CallOption) (*DeleteWorkingScheduleResponse, error) {
	out := new(DeleteWorkingScheduleResponse)
	err := c.cc.Invoke(ctx, WorkingScheduleService_DeleteWorkingSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkingScheduleServiceServer is the server API for WorkingScheduleService service.
// All implementations must embed UnimplementedWorkingScheduleServiceServer
// for forward compatibility
type WorkingScheduleServiceServer interface {
	CreateWorkingSchedule(context.Context, *CreateWorkingScheduleRequest) (*CreateWorkingScheduleResponse, error)
	ReadWorkingSchedule(context.Context, *ReadWorkingScheduleRequest) (*ReadWorkingScheduleResponse, error)
	ReadWorkingScheduleForecast(context.Context, *ReadWorkingScheduleForecastRequest) (*ReadWorkingScheduleForecastResponse, error)
	SearchWorkingSchedule(context.Context, *SearchWorkingScheduleRequest) (*SearchWorkingScheduleResponse, error)
	UpdateWorkingSchedule(context.Context, *UpdateWorkingScheduleRequest) (*UpdateWorkingScheduleResponse, error)
	UpdateWorkingScheduleAddAgents(context.Context, *UpdateWorkingScheduleAddAgentsRequest) (*UpdateWorkingScheduleAddAgentsResponse, error)
	UpdateWorkingScheduleRemoveAgent(context.Context, *UpdateWorkingScheduleRemoveAgentRequest) (*UpdateWorkingScheduleRemoveAgentResponse, error)
	DeleteWorkingSchedule(context.Context, *DeleteWorkingScheduleRequest) (*DeleteWorkingScheduleResponse, error)
	mustEmbedUnimplementedWorkingScheduleServiceServer()
}

// UnimplementedWorkingScheduleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkingScheduleServiceServer struct {
}

func (UnimplementedWorkingScheduleServiceServer) CreateWorkingSchedule(context.Context, *CreateWorkingScheduleRequest) (*CreateWorkingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkingSchedule not implemented")
}
func (UnimplementedWorkingScheduleServiceServer) ReadWorkingSchedule(context.Context, *ReadWorkingScheduleRequest) (*ReadWorkingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWorkingSchedule not implemented")
}
func (UnimplementedWorkingScheduleServiceServer) ReadWorkingScheduleForecast(context.Context, *ReadWorkingScheduleForecastRequest) (*ReadWorkingScheduleForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWorkingScheduleForecast not implemented")
}
func (UnimplementedWorkingScheduleServiceServer) SearchWorkingSchedule(context.Context, *SearchWorkingScheduleRequest) (*SearchWorkingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWorkingSchedule not implemented")
}
func (UnimplementedWorkingScheduleServiceServer) UpdateWorkingSchedule(context.Context, *UpdateWorkingScheduleRequest) (*UpdateWorkingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkingSchedule not implemented")
}
func (UnimplementedWorkingScheduleServiceServer) UpdateWorkingScheduleAddAgents(context.Context, *UpdateWorkingScheduleAddAgentsRequest) (*UpdateWorkingScheduleAddAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkingScheduleAddAgents not implemented")
}
func (UnimplementedWorkingScheduleServiceServer) UpdateWorkingScheduleRemoveAgent(context.Context, *UpdateWorkingScheduleRemoveAgentRequest) (*UpdateWorkingScheduleRemoveAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkingScheduleRemoveAgent not implemented")
}
func (UnimplementedWorkingScheduleServiceServer) DeleteWorkingSchedule(context.Context, *DeleteWorkingScheduleRequest) (*DeleteWorkingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkingSchedule not implemented")
}
func (UnimplementedWorkingScheduleServiceServer) mustEmbedUnimplementedWorkingScheduleServiceServer() {
}

// UnsafeWorkingScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkingScheduleServiceServer will
// result in compilation errors.
type UnsafeWorkingScheduleServiceServer interface {
	mustEmbedUnimplementedWorkingScheduleServiceServer()
}

func RegisterWorkingScheduleServiceServer(s grpc.ServiceRegistrar, srv WorkingScheduleServiceServer) {
	s.RegisterService(&WorkingScheduleService_ServiceDesc, srv)
}

func _WorkingScheduleService_CreateWorkingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingScheduleServiceServer).CreateWorkingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingScheduleService_CreateWorkingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingScheduleServiceServer).CreateWorkingSchedule(ctx, req.(*CreateWorkingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingScheduleService_ReadWorkingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWorkingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingScheduleServiceServer).ReadWorkingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingScheduleService_ReadWorkingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingScheduleServiceServer).ReadWorkingSchedule(ctx, req.(*ReadWorkingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingScheduleService_ReadWorkingScheduleForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWorkingScheduleForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingScheduleServiceServer).ReadWorkingScheduleForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingScheduleService_ReadWorkingScheduleForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingScheduleServiceServer).ReadWorkingScheduleForecast(ctx, req.(*ReadWorkingScheduleForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingScheduleService_SearchWorkingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWorkingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingScheduleServiceServer).SearchWorkingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingScheduleService_SearchWorkingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingScheduleServiceServer).SearchWorkingSchedule(ctx, req.(*SearchWorkingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingScheduleService_UpdateWorkingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingScheduleServiceServer).UpdateWorkingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingScheduleService_UpdateWorkingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingScheduleServiceServer).UpdateWorkingSchedule(ctx, req.(*UpdateWorkingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingScheduleService_UpdateWorkingScheduleAddAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkingScheduleAddAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingScheduleServiceServer).UpdateWorkingScheduleAddAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingScheduleService_UpdateWorkingScheduleAddAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingScheduleServiceServer).UpdateWorkingScheduleAddAgents(ctx, req.(*UpdateWorkingScheduleAddAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingScheduleService_UpdateWorkingScheduleRemoveAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkingScheduleRemoveAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingScheduleServiceServer).UpdateWorkingScheduleRemoveAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingScheduleService_UpdateWorkingScheduleRemoveAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingScheduleServiceServer).UpdateWorkingScheduleRemoveAgent(ctx, req.(*UpdateWorkingScheduleRemoveAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingScheduleService_DeleteWorkingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingScheduleServiceServer).DeleteWorkingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingScheduleService_DeleteWorkingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingScheduleServiceServer).DeleteWorkingSchedule(ctx, req.(*DeleteWorkingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkingScheduleService_ServiceDesc is the grpc.ServiceDesc for WorkingScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkingScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wfm.WorkingScheduleService",
	HandlerType: (*WorkingScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkingSchedule",
			Handler:    _WorkingScheduleService_CreateWorkingSchedule_Handler,
		},
		{
			MethodName: "ReadWorkingSchedule",
			Handler:    _WorkingScheduleService_ReadWorkingSchedule_Handler,
		},
		{
			MethodName: "ReadWorkingScheduleForecast",
			Handler:    _WorkingScheduleService_ReadWorkingScheduleForecast_Handler,
		},
		{
			MethodName: "SearchWorkingSchedule",
			Handler:    _WorkingScheduleService_SearchWorkingSchedule_Handler,
		},
		{
			MethodName: "UpdateWorkingSchedule",
			Handler:    _WorkingScheduleService_UpdateWorkingSchedule_Handler,
		},
		{
			MethodName: "UpdateWorkingScheduleAddAgents",
			Handler:    _WorkingScheduleService_UpdateWorkingScheduleAddAgents_Handler,
		},
		{
			MethodName: "UpdateWorkingScheduleRemoveAgent",
			Handler:    _WorkingScheduleService_UpdateWorkingScheduleRemoveAgent_Handler,
		},
		{
			MethodName: "DeleteWorkingSchedule",
			Handler:    _WorkingScheduleService_DeleteWorkingSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "working_schedule.proto",
}
