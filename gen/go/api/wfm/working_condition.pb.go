// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: working_condition.proto

package wfm

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/webitel/webitel-go-kit/cmd/protoc-gen-go-webitel/gen/go/proto/webitel"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateWorkingConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *WorkingCondition `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateWorkingConditionRequest) Reset() {
	*x = CreateWorkingConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkingConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkingConditionRequest) ProtoMessage() {}

func (x *CreateWorkingConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkingConditionRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkingConditionRequest) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWorkingConditionRequest) GetItem() *WorkingCondition {
	if x != nil {
		return x.Item
	}
	return nil
}

type CreateWorkingConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *WorkingCondition `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateWorkingConditionResponse) Reset() {
	*x = CreateWorkingConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkingConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkingConditionResponse) ProtoMessage() {}

func (x *CreateWorkingConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkingConditionResponse.ProtoReflect.Descriptor instead.
func (*CreateWorkingConditionResponse) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWorkingConditionResponse) GetItem() *WorkingCondition {
	if x != nil {
		return x.Item
	}
	return nil
}

type ReadWorkingConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ReadWorkingConditionRequest) Reset() {
	*x = ReadWorkingConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadWorkingConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWorkingConditionRequest) ProtoMessage() {}

func (x *ReadWorkingConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWorkingConditionRequest.ProtoReflect.Descriptor instead.
func (*ReadWorkingConditionRequest) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{2}
}

func (x *ReadWorkingConditionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReadWorkingConditionRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ReadWorkingConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *WorkingCondition `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ReadWorkingConditionResponse) Reset() {
	*x = ReadWorkingConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadWorkingConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWorkingConditionResponse) ProtoMessage() {}

func (x *ReadWorkingConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWorkingConditionResponse.ProtoReflect.Descriptor instead.
func (*ReadWorkingConditionResponse) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{3}
}

func (x *ReadWorkingConditionResponse) GetItem() *WorkingCondition {
	if x != nil {
		return x.Item
	}
	return nil
}

type SearchWorkingConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   *int32   `protobuf:"varint,1,opt,name=page,proto3,oneof" json:"page,omitempty"`
	Size   *int32   `protobuf:"varint,2,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Q      *string  `protobuf:"bytes,3,opt,name=q,proto3,oneof" json:"q,omitempty"`
	Sort   *string  `protobuf:"bytes,4,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Fields []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *SearchWorkingConditionRequest) Reset() {
	*x = SearchWorkingConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWorkingConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWorkingConditionRequest) ProtoMessage() {}

func (x *SearchWorkingConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWorkingConditionRequest.ProtoReflect.Descriptor instead.
func (*SearchWorkingConditionRequest) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{4}
}

func (x *SearchWorkingConditionRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *SearchWorkingConditionRequest) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *SearchWorkingConditionRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *SearchWorkingConditionRequest) GetSort() string {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return ""
}

func (x *SearchWorkingConditionRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SearchWorkingConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*WorkingCondition `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Next  bool                `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *SearchWorkingConditionResponse) Reset() {
	*x = SearchWorkingConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWorkingConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWorkingConditionResponse) ProtoMessage() {}

func (x *SearchWorkingConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWorkingConditionResponse.ProtoReflect.Descriptor instead.
func (*SearchWorkingConditionResponse) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{5}
}

func (x *SearchWorkingConditionResponse) GetItems() []*WorkingCondition {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchWorkingConditionResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

type UpdateWorkingConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *WorkingCondition `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateWorkingConditionRequest) Reset() {
	*x = UpdateWorkingConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkingConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkingConditionRequest) ProtoMessage() {}

func (x *UpdateWorkingConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkingConditionRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkingConditionRequest) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateWorkingConditionRequest) GetItem() *WorkingCondition {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateWorkingConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *WorkingCondition `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateWorkingConditionResponse) Reset() {
	*x = UpdateWorkingConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkingConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkingConditionResponse) ProtoMessage() {}

func (x *UpdateWorkingConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkingConditionResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkingConditionResponse) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateWorkingConditionResponse) GetItem() *WorkingCondition {
	if x != nil {
		return x.Item
	}
	return nil
}

type DeleteWorkingConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteWorkingConditionRequest) Reset() {
	*x = DeleteWorkingConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkingConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkingConditionRequest) ProtoMessage() {}

func (x *DeleteWorkingConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkingConditionRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkingConditionRequest) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteWorkingConditionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteWorkingConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteWorkingConditionResponse) Reset() {
	*x = DeleteWorkingConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkingConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkingConditionResponse) ProtoMessage() {}

func (x *DeleteWorkingConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkingConditionResponse.ProtoReflect.Descriptor instead.
func (*DeleteWorkingConditionResponse) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteWorkingConditionResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WorkingCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId         int64         `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt        int64         `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy        *LookupEntity `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt        int64         `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy        *LookupEntity `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Name             string        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Description      *string       `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
	WorkdayHours     *int32        `protobuf:"varint,9,opt,name=workday_hours,json=workdayHours,proto3,oneof" json:"workday_hours,omitempty"`
	WorkdaysPerMonth *int32        `protobuf:"varint,10,opt,name=workdays_per_month,json=workdaysPerMonth,proto3,oneof" json:"workdays_per_month,omitempty"`
	Vacation         *int32        `protobuf:"varint,11,opt,name=vacation,proto3,oneof" json:"vacation,omitempty"`
	SickLeaves       *int32        `protobuf:"varint,12,opt,name=sick_leaves,json=sickLeaves,proto3,oneof" json:"sick_leaves,omitempty"`
	DaysOff          *int32        `protobuf:"varint,13,opt,name=days_off,json=daysOff,proto3,oneof" json:"days_off,omitempty"`
	PauseDuration    *int32        `protobuf:"varint,14,opt,name=pause_duration,json=pauseDuration,proto3,oneof" json:"pause_duration,omitempty"`
	PauseTemplate    *LookupEntity `protobuf:"bytes,15,opt,name=pause_template,json=pauseTemplate,proto3" json:"pause_template,omitempty"`
	ShiftTemplate    *LookupEntity `protobuf:"bytes,16,opt,name=shift_template,json=shiftTemplate,proto3,oneof" json:"shift_template,omitempty"`
}

func (x *WorkingCondition) Reset() {
	*x = WorkingCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_working_condition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkingCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkingCondition) ProtoMessage() {}

func (x *WorkingCondition) ProtoReflect() protoreflect.Message {
	mi := &file_working_condition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkingCondition.ProtoReflect.Descriptor instead.
func (*WorkingCondition) Descriptor() ([]byte, []int) {
	return file_working_condition_proto_rawDescGZIP(), []int{10}
}

func (x *WorkingCondition) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkingCondition) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *WorkingCondition) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WorkingCondition) GetCreatedBy() *LookupEntity {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *WorkingCondition) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *WorkingCondition) GetUpdatedBy() *LookupEntity {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *WorkingCondition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkingCondition) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *WorkingCondition) GetWorkdayHours() int32 {
	if x != nil && x.WorkdayHours != nil {
		return *x.WorkdayHours
	}
	return 0
}

func (x *WorkingCondition) GetWorkdaysPerMonth() int32 {
	if x != nil && x.WorkdaysPerMonth != nil {
		return *x.WorkdaysPerMonth
	}
	return 0
}

func (x *WorkingCondition) GetVacation() int32 {
	if x != nil && x.Vacation != nil {
		return *x.Vacation
	}
	return 0
}

func (x *WorkingCondition) GetSickLeaves() int32 {
	if x != nil && x.SickLeaves != nil {
		return *x.SickLeaves
	}
	return 0
}

func (x *WorkingCondition) GetDaysOff() int32 {
	if x != nil && x.DaysOff != nil {
		return *x.DaysOff
	}
	return 0
}

func (x *WorkingCondition) GetPauseDuration() int32 {
	if x != nil && x.PauseDuration != nil {
		return *x.PauseDuration
	}
	return 0
}

func (x *WorkingCondition) GetPauseTemplate() *LookupEntity {
	if x != nil {
		return x.PauseTemplate
	}
	return nil
}

func (x *WorkingCondition) GetShiftTemplate() *LookupEntity {
	if x != nil {
		return x.ShiftTemplate
	}
	return nil
}

var File_working_condition_proto protoreflect.FileDescriptor

var file_working_condition_proto_rawDesc = []byte{
	0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x77, 0x66, 0x6d, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x4b, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0xad, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x22, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0xf1, 0x01, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x42, 0xd8, 0x01, 0xba, 0x48, 0xd4, 0x01, 0x92, 0x01, 0xd0, 0x01, 0x18, 0x01, 0x22, 0xcb,
	0x01, 0x72, 0xc8, 0x01, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x52, 0x09, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61,
	0x79, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x08, 0x76, 0x61, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x52, 0x08, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x52, 0x0e, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0xb0, 0x03, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x48, 0x01, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xfa, 0x01, 0x48, 0x02, 0x52, 0x01,
	0x71, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0xf1, 0x01,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0xd8,
	0x01, 0xba, 0x48, 0xd4, 0x01, 0x92, 0x01, 0xd0, 0x01, 0x18, 0x01, 0x22, 0xcb, 0x01, 0x72, 0xc8,
	0x01, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x52, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x08, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x52,
	0x08, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x52, 0x0e, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x71, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x22, 0x61, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x52, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x4b, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x3b, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x22, 0x02, 0x20, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa5, 0x09, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xfa, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a,
	0x04, 0x18, 0x18, 0x20, 0x00, 0x48, 0x01, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b,
	0x64, 0x61, 0x79, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x1f, 0x20, 0x00, 0x48,
	0x02, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x08, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x1a, 0x05, 0x18,
	0xed, 0x02, 0x20, 0x00, 0x48, 0x03, 0x52, 0x08, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x1a, 0x05, 0x18,
	0xed, 0x02, 0x20, 0x00, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x69, 0x63, 0x6b, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66,
	0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x1a, 0x05, 0x18, 0xed,
	0x02, 0x20, 0x00, 0x48, 0x05, 0x52, 0x07, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x66, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x0e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x1a, 0x05,
	0x18, 0xa0, 0x0b, 0x20, 0x00, 0x48, 0x06, 0x52, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0e, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x07,
	0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x3a, 0xbf, 0x02, 0xba, 0x48, 0xbb, 0x02, 0x1a, 0x89, 0x01, 0x0a, 0x20, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x33,
	0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20,
	0x74, 0x68, 0x61, 0x6e, 0x20, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x30, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61,
	0x79, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x3e, 0x3d, 0x20, 0x28, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x2f, 0x20, 0x36, 0x30, 0x29, 0x1a, 0xac, 0x01, 0x0a, 0x23, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x6e,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x12, 0x4a, 0x73,
	0x75, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20,
	0x73, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x33, 0x36, 0x35, 0x20, 0x64, 0x61, 0x79, 0x73, 0x1a, 0x39, 0x28, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2b, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x73, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x20, 0x2b, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x29, 0x20, 0x3c, 0x3d,
	0x20, 0x33, 0x36, 0x35, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x64,
	0x61, 0x79, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x93, 0x06,
	0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x90,
	0xb5, 0x18, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8d, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x90, 0xb5, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8e, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x90, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9b,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x38, 0x90, 0xb5, 0x18, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01,
	0x2a, 0x1a, 0x29, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x93, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x90, 0xb5, 0x18, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x1a, 0x0f, 0x8a, 0xb5, 0x18, 0x0b, 0x77, 0x66, 0x6d, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x73, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x77, 0x66, 0x6d, 0x3b, 0x77, 0x66, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_working_condition_proto_rawDescOnce sync.Once
	file_working_condition_proto_rawDescData = file_working_condition_proto_rawDesc
)

func file_working_condition_proto_rawDescGZIP() []byte {
	file_working_condition_proto_rawDescOnce.Do(func() {
		file_working_condition_proto_rawDescData = protoimpl.X.CompressGZIP(file_working_condition_proto_rawDescData)
	})
	return file_working_condition_proto_rawDescData
}

var file_working_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_working_condition_proto_goTypes = []interface{}{
	(*CreateWorkingConditionRequest)(nil),  // 0: wfm.CreateWorkingConditionRequest
	(*CreateWorkingConditionResponse)(nil), // 1: wfm.CreateWorkingConditionResponse
	(*ReadWorkingConditionRequest)(nil),    // 2: wfm.ReadWorkingConditionRequest
	(*ReadWorkingConditionResponse)(nil),   // 3: wfm.ReadWorkingConditionResponse
	(*SearchWorkingConditionRequest)(nil),  // 4: wfm.SearchWorkingConditionRequest
	(*SearchWorkingConditionResponse)(nil), // 5: wfm.SearchWorkingConditionResponse
	(*UpdateWorkingConditionRequest)(nil),  // 6: wfm.UpdateWorkingConditionRequest
	(*UpdateWorkingConditionResponse)(nil), // 7: wfm.UpdateWorkingConditionResponse
	(*DeleteWorkingConditionRequest)(nil),  // 8: wfm.DeleteWorkingConditionRequest
	(*DeleteWorkingConditionResponse)(nil), // 9: wfm.DeleteWorkingConditionResponse
	(*WorkingCondition)(nil),               // 10: wfm.WorkingCondition
	(*LookupEntity)(nil),                   // 11: wfm.LookupEntity
}
var file_working_condition_proto_depIdxs = []int32{
	10, // 0: wfm.CreateWorkingConditionRequest.item:type_name -> wfm.WorkingCondition
	10, // 1: wfm.CreateWorkingConditionResponse.item:type_name -> wfm.WorkingCondition
	10, // 2: wfm.ReadWorkingConditionResponse.item:type_name -> wfm.WorkingCondition
	10, // 3: wfm.SearchWorkingConditionResponse.items:type_name -> wfm.WorkingCondition
	10, // 4: wfm.UpdateWorkingConditionRequest.item:type_name -> wfm.WorkingCondition
	10, // 5: wfm.UpdateWorkingConditionResponse.item:type_name -> wfm.WorkingCondition
	11, // 6: wfm.WorkingCondition.created_by:type_name -> wfm.LookupEntity
	11, // 7: wfm.WorkingCondition.updated_by:type_name -> wfm.LookupEntity
	11, // 8: wfm.WorkingCondition.pause_template:type_name -> wfm.LookupEntity
	11, // 9: wfm.WorkingCondition.shift_template:type_name -> wfm.LookupEntity
	0,  // 10: wfm.WorkingConditionService.CreateWorkingCondition:input_type -> wfm.CreateWorkingConditionRequest
	2,  // 11: wfm.WorkingConditionService.ReadWorkingCondition:input_type -> wfm.ReadWorkingConditionRequest
	4,  // 12: wfm.WorkingConditionService.SearchWorkingCondition:input_type -> wfm.SearchWorkingConditionRequest
	6,  // 13: wfm.WorkingConditionService.UpdateWorkingCondition:input_type -> wfm.UpdateWorkingConditionRequest
	8,  // 14: wfm.WorkingConditionService.DeleteWorkingCondition:input_type -> wfm.DeleteWorkingConditionRequest
	1,  // 15: wfm.WorkingConditionService.CreateWorkingCondition:output_type -> wfm.CreateWorkingConditionResponse
	3,  // 16: wfm.WorkingConditionService.ReadWorkingCondition:output_type -> wfm.ReadWorkingConditionResponse
	5,  // 17: wfm.WorkingConditionService.SearchWorkingCondition:output_type -> wfm.SearchWorkingConditionResponse
	7,  // 18: wfm.WorkingConditionService.UpdateWorkingCondition:output_type -> wfm.UpdateWorkingConditionResponse
	9,  // 19: wfm.WorkingConditionService.DeleteWorkingCondition:output_type -> wfm.DeleteWorkingConditionResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_working_condition_proto_init() }
func file_working_condition_proto_init() {
	if File_working_condition_proto != nil {
		return
	}
	file_lookup_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_working_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkingConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_working_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkingConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_working_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadWorkingConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_working_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadWorkingConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_working_condition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWorkingConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_working_condition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWorkingConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_working_condition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkingConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_working_condition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkingConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_working_condition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkingConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_working_condition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkingConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_working_condition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkingCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_working_condition_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_working_condition_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_working_condition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_working_condition_proto_goTypes,
		DependencyIndexes: file_working_condition_proto_depIdxs,
		MessageInfos:      file_working_condition_proto_msgTypes,
	}.Build()
	File_working_condition_proto = out.File
	file_working_condition_proto_rawDesc = nil
	file_working_condition_proto_goTypes = nil
	file_working_condition_proto_depIdxs = nil
}
