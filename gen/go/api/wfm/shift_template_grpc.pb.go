// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: shift_template.proto

package wfm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShiftTemplateService_CreateShiftTemplate_FullMethodName = "/wfm.ShiftTemplateService/CreateShiftTemplate"
	ShiftTemplateService_ReadShiftTemplate_FullMethodName   = "/wfm.ShiftTemplateService/ReadShiftTemplate"
	ShiftTemplateService_SearchShiftTemplate_FullMethodName = "/wfm.ShiftTemplateService/SearchShiftTemplate"
	ShiftTemplateService_UpdateShiftTemplate_FullMethodName = "/wfm.ShiftTemplateService/UpdateShiftTemplate"
	ShiftTemplateService_DeleteShiftTemplate_FullMethodName = "/wfm.ShiftTemplateService/DeleteShiftTemplate"
)

// ShiftTemplateServiceClient is the client API for ShiftTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShiftTemplateServiceClient interface {
	CreateShiftTemplate(ctx context.Context, in *CreateShiftTemplateRequest, opts ...grpc.CallOption) (*CreateShiftTemplateResponse, error)
	ReadShiftTemplate(ctx context.Context, in *ReadShiftTemplateRequest, opts ...grpc.CallOption) (*ReadShiftTemplateResponse, error)
	SearchShiftTemplate(ctx context.Context, in *SearchShiftTemplateRequest, opts ...grpc.CallOption) (*SearchShiftTemplateResponse, error)
	// UpdateShiftTemplate updates a shift template with a list times.
	// Update existing time, create that not exists in database and delete that not exists in the list.
	UpdateShiftTemplate(ctx context.Context, in *UpdateShiftTemplateRequest, opts ...grpc.CallOption) (*UpdateShiftTemplateResponse, error)
	DeleteShiftTemplate(ctx context.Context, in *DeleteShiftTemplateRequest, opts ...grpc.CallOption) (*DeleteShiftTemplateResponse, error)
}

type shiftTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShiftTemplateServiceClient(cc grpc.ClientConnInterface) ShiftTemplateServiceClient {
	return &shiftTemplateServiceClient{cc}
}

func (c *shiftTemplateServiceClient) CreateShiftTemplate(ctx context.Context, in *CreateShiftTemplateRequest, opts ...grpc.CallOption) (*CreateShiftTemplateResponse, error) {
	out := new(CreateShiftTemplateResponse)
	err := c.cc.Invoke(ctx, ShiftTemplateService_CreateShiftTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftTemplateServiceClient) ReadShiftTemplate(ctx context.Context, in *ReadShiftTemplateRequest, opts ...grpc.CallOption) (*ReadShiftTemplateResponse, error) {
	out := new(ReadShiftTemplateResponse)
	err := c.cc.Invoke(ctx, ShiftTemplateService_ReadShiftTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftTemplateServiceClient) SearchShiftTemplate(ctx context.Context, in *SearchShiftTemplateRequest, opts ...grpc.CallOption) (*SearchShiftTemplateResponse, error) {
	out := new(SearchShiftTemplateResponse)
	err := c.cc.Invoke(ctx, ShiftTemplateService_SearchShiftTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftTemplateServiceClient) UpdateShiftTemplate(ctx context.Context, in *UpdateShiftTemplateRequest, opts ...grpc.CallOption) (*UpdateShiftTemplateResponse, error) {
	out := new(UpdateShiftTemplateResponse)
	err := c.cc.Invoke(ctx, ShiftTemplateService_UpdateShiftTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftTemplateServiceClient) DeleteShiftTemplate(ctx context.Context, in *DeleteShiftTemplateRequest, opts ...grpc.CallOption) (*DeleteShiftTemplateResponse, error) {
	out := new(DeleteShiftTemplateResponse)
	err := c.cc.Invoke(ctx, ShiftTemplateService_DeleteShiftTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShiftTemplateServiceServer is the server API for ShiftTemplateService service.
// All implementations must embed UnimplementedShiftTemplateServiceServer
// for forward compatibility
type ShiftTemplateServiceServer interface {
	CreateShiftTemplate(context.Context, *CreateShiftTemplateRequest) (*CreateShiftTemplateResponse, error)
	ReadShiftTemplate(context.Context, *ReadShiftTemplateRequest) (*ReadShiftTemplateResponse, error)
	SearchShiftTemplate(context.Context, *SearchShiftTemplateRequest) (*SearchShiftTemplateResponse, error)
	// UpdateShiftTemplate updates a shift template with a list times.
	// Update existing time, create that not exists in database and delete that not exists in the list.
	UpdateShiftTemplate(context.Context, *UpdateShiftTemplateRequest) (*UpdateShiftTemplateResponse, error)
	DeleteShiftTemplate(context.Context, *DeleteShiftTemplateRequest) (*DeleteShiftTemplateResponse, error)
	mustEmbedUnimplementedShiftTemplateServiceServer()
}

// UnimplementedShiftTemplateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShiftTemplateServiceServer struct {
}

func (UnimplementedShiftTemplateServiceServer) CreateShiftTemplate(context.Context, *CreateShiftTemplateRequest) (*CreateShiftTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShiftTemplate not implemented")
}
func (UnimplementedShiftTemplateServiceServer) ReadShiftTemplate(context.Context, *ReadShiftTemplateRequest) (*ReadShiftTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadShiftTemplate not implemented")
}
func (UnimplementedShiftTemplateServiceServer) SearchShiftTemplate(context.Context, *SearchShiftTemplateRequest) (*SearchShiftTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchShiftTemplate not implemented")
}
func (UnimplementedShiftTemplateServiceServer) UpdateShiftTemplate(context.Context, *UpdateShiftTemplateRequest) (*UpdateShiftTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShiftTemplate not implemented")
}
func (UnimplementedShiftTemplateServiceServer) DeleteShiftTemplate(context.Context, *DeleteShiftTemplateRequest) (*DeleteShiftTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShiftTemplate not implemented")
}
func (UnimplementedShiftTemplateServiceServer) mustEmbedUnimplementedShiftTemplateServiceServer() {}

// UnsafeShiftTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShiftTemplateServiceServer will
// result in compilation errors.
type UnsafeShiftTemplateServiceServer interface {
	mustEmbedUnimplementedShiftTemplateServiceServer()
}

func RegisterShiftTemplateServiceServer(s grpc.ServiceRegistrar, srv ShiftTemplateServiceServer) {
	s.RegisterService(&ShiftTemplateService_ServiceDesc, srv)
}

func _ShiftTemplateService_CreateShiftTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftTemplateServiceServer).CreateShiftTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShiftTemplateService_CreateShiftTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftTemplateServiceServer).CreateShiftTemplate(ctx, req.(*CreateShiftTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftTemplateService_ReadShiftTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadShiftTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftTemplateServiceServer).ReadShiftTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShiftTemplateService_ReadShiftTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftTemplateServiceServer).ReadShiftTemplate(ctx, req.(*ReadShiftTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftTemplateService_SearchShiftTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchShiftTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftTemplateServiceServer).SearchShiftTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShiftTemplateService_SearchShiftTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftTemplateServiceServer).SearchShiftTemplate(ctx, req.(*SearchShiftTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftTemplateService_UpdateShiftTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShiftTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftTemplateServiceServer).UpdateShiftTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShiftTemplateService_UpdateShiftTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftTemplateServiceServer).UpdateShiftTemplate(ctx, req.(*UpdateShiftTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftTemplateService_DeleteShiftTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShiftTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftTemplateServiceServer).DeleteShiftTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShiftTemplateService_DeleteShiftTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftTemplateServiceServer).DeleteShiftTemplate(ctx, req.(*DeleteShiftTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShiftTemplateService_ServiceDesc is the grpc.ServiceDesc for ShiftTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShiftTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wfm.ShiftTemplateService",
	HandlerType: (*ShiftTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShiftTemplate",
			Handler:    _ShiftTemplateService_CreateShiftTemplate_Handler,
		},
		{
			MethodName: "ReadShiftTemplate",
			Handler:    _ShiftTemplateService_ReadShiftTemplate_Handler,
		},
		{
			MethodName: "SearchShiftTemplate",
			Handler:    _ShiftTemplateService_SearchShiftTemplate_Handler,
		},
		{
			MethodName: "UpdateShiftTemplate",
			Handler:    _ShiftTemplateService_UpdateShiftTemplate_Handler,
		},
		{
			MethodName: "DeleteShiftTemplate",
			Handler:    _ShiftTemplateService_DeleteShiftTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shift_template.proto",
}
