// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: agent_working_conditions.proto

package wfm

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReadAgentWorkingConditionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReadAgentWorkingConditionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadAgentWorkingConditionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadAgentWorkingConditionsRequestMultiError, or nil if none found.
func (m *ReadAgentWorkingConditionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadAgentWorkingConditionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	if len(errors) > 0 {
		return ReadAgentWorkingConditionsRequestMultiError(errors)
	}

	return nil
}

// ReadAgentWorkingConditionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReadAgentWorkingConditionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadAgentWorkingConditionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadAgentWorkingConditionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadAgentWorkingConditionsRequestMultiError) AllErrors() []error { return m }

// ReadAgentWorkingConditionsRequestValidationError is the validation error
// returned by ReadAgentWorkingConditionsRequest.Validate if the designated
// constraints aren't met.
type ReadAgentWorkingConditionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAgentWorkingConditionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAgentWorkingConditionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAgentWorkingConditionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAgentWorkingConditionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAgentWorkingConditionsRequestValidationError) ErrorName() string {
	return "ReadAgentWorkingConditionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAgentWorkingConditionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAgentWorkingConditionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAgentWorkingConditionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAgentWorkingConditionsRequestValidationError{}

// Validate checks the field values on ReadAgentWorkingConditionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReadAgentWorkingConditionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadAgentWorkingConditionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadAgentWorkingConditionsResponseMultiError, or nil if none found.
func (m *ReadAgentWorkingConditionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadAgentWorkingConditionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadAgentWorkingConditionsResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadAgentWorkingConditionsResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadAgentWorkingConditionsResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadAgentWorkingConditionsResponseMultiError(errors)
	}

	return nil
}

// ReadAgentWorkingConditionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReadAgentWorkingConditionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadAgentWorkingConditionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadAgentWorkingConditionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadAgentWorkingConditionsResponseMultiError) AllErrors() []error { return m }

// ReadAgentWorkingConditionsResponseValidationError is the validation error
// returned by ReadAgentWorkingConditionsResponse.Validate if the designated
// constraints aren't met.
type ReadAgentWorkingConditionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAgentWorkingConditionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAgentWorkingConditionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAgentWorkingConditionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAgentWorkingConditionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAgentWorkingConditionsResponseValidationError) ErrorName() string {
	return "ReadAgentWorkingConditionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAgentWorkingConditionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAgentWorkingConditionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAgentWorkingConditionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAgentWorkingConditionsResponseValidationError{}

// Validate checks the field values on UpdateAgentWorkingConditionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateAgentWorkingConditionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentWorkingConditionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateAgentWorkingConditionsRequestMultiError, or nil if none found.
func (m *UpdateAgentWorkingConditionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentWorkingConditionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAgentWorkingConditionsRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAgentWorkingConditionsRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAgentWorkingConditionsRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAgentWorkingConditionsRequestMultiError(errors)
	}

	return nil
}

// UpdateAgentWorkingConditionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateAgentWorkingConditionsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAgentWorkingConditionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentWorkingConditionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentWorkingConditionsRequestMultiError) AllErrors() []error { return m }

// UpdateAgentWorkingConditionsRequestValidationError is the validation error
// returned by UpdateAgentWorkingConditionsRequest.Validate if the designated
// constraints aren't met.
type UpdateAgentWorkingConditionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentWorkingConditionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentWorkingConditionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentWorkingConditionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentWorkingConditionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentWorkingConditionsRequestValidationError) ErrorName() string {
	return "UpdateAgentWorkingConditionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentWorkingConditionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentWorkingConditionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentWorkingConditionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentWorkingConditionsRequestValidationError{}

// Validate checks the field values on UpdateAgentWorkingConditionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateAgentWorkingConditionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentWorkingConditionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateAgentWorkingConditionsResponseMultiError, or nil if none found.
func (m *UpdateAgentWorkingConditionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentWorkingConditionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAgentWorkingConditionsResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAgentWorkingConditionsResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAgentWorkingConditionsResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAgentWorkingConditionsResponseMultiError(errors)
	}

	return nil
}

// UpdateAgentWorkingConditionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateAgentWorkingConditionsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAgentWorkingConditionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentWorkingConditionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentWorkingConditionsResponseMultiError) AllErrors() []error { return m }

// UpdateAgentWorkingConditionsResponseValidationError is the validation error
// returned by UpdateAgentWorkingConditionsResponse.Validate if the designated
// constraints aren't met.
type UpdateAgentWorkingConditionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentWorkingConditionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentWorkingConditionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentWorkingConditionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentWorkingConditionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentWorkingConditionsResponseValidationError) ErrorName() string {
	return "UpdateAgentWorkingConditionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentWorkingConditionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentWorkingConditionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentWorkingConditionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentWorkingConditionsResponseValidationError{}

// Validate checks the field values on AgentWorkingConditions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AgentWorkingConditions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentWorkingConditions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgentWorkingConditionsMultiError, or nil if none found.
func (m *AgentWorkingConditions) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentWorkingConditions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkingCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgentWorkingConditionsValidationError{
					field:  "WorkingCondition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgentWorkingConditionsValidationError{
					field:  "WorkingCondition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkingCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgentWorkingConditionsValidationError{
				field:  "WorkingCondition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.PauseTemplate != nil {

		if all {
			switch v := interface{}(m.GetPauseTemplate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentWorkingConditionsValidationError{
						field:  "PauseTemplate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentWorkingConditionsValidationError{
						field:  "PauseTemplate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPauseTemplate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentWorkingConditionsValidationError{
					field:  "PauseTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AgentWorkingConditionsMultiError(errors)
	}

	return nil
}

// AgentWorkingConditionsMultiError is an error wrapping multiple validation
// errors returned by AgentWorkingConditions.ValidateAll() if the designated
// constraints aren't met.
type AgentWorkingConditionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentWorkingConditionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentWorkingConditionsMultiError) AllErrors() []error { return m }

// AgentWorkingConditionsValidationError is the validation error returned by
// AgentWorkingConditions.Validate if the designated constraints aren't met.
type AgentWorkingConditionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentWorkingConditionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentWorkingConditionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentWorkingConditionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentWorkingConditionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentWorkingConditionsValidationError) ErrorName() string {
	return "AgentWorkingConditionsValidationError"
}

// Error satisfies the builtin error interface
func (e AgentWorkingConditionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentWorkingConditions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentWorkingConditionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentWorkingConditionsValidationError{}
