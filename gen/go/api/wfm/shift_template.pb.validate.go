// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shift_template.proto

package wfm

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShiftTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShiftTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShiftTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShiftTemplateRequestMultiError, or nil if none found.
func (m *CreateShiftTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShiftTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShiftTemplateRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShiftTemplateRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShiftTemplateRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShiftTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateShiftTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by CreateShiftTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateShiftTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShiftTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShiftTemplateRequestMultiError) AllErrors() []error { return m }

// CreateShiftTemplateRequestValidationError is the validation error returned
// by CreateShiftTemplateRequest.Validate if the designated constraints aren't met.
type CreateShiftTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShiftTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShiftTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShiftTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShiftTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShiftTemplateRequestValidationError) ErrorName() string {
	return "CreateShiftTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShiftTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShiftTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShiftTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShiftTemplateRequestValidationError{}

// Validate checks the field values on CreateShiftTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShiftTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShiftTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShiftTemplateResponseMultiError, or nil if none found.
func (m *CreateShiftTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShiftTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShiftTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShiftTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShiftTemplateResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShiftTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateShiftTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by CreateShiftTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateShiftTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShiftTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShiftTemplateResponseMultiError) AllErrors() []error { return m }

// CreateShiftTemplateResponseValidationError is the validation error returned
// by CreateShiftTemplateResponse.Validate if the designated constraints
// aren't met.
type CreateShiftTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShiftTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShiftTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShiftTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShiftTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShiftTemplateResponseValidationError) ErrorName() string {
	return "CreateShiftTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShiftTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShiftTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShiftTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShiftTemplateResponseValidationError{}

// Validate checks the field values on ReadShiftTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadShiftTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadShiftTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadShiftTemplateRequestMultiError, or nil if none found.
func (m *ReadShiftTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadShiftTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ReadShiftTemplateRequestMultiError(errors)
	}

	return nil
}

// ReadShiftTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by ReadShiftTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadShiftTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadShiftTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadShiftTemplateRequestMultiError) AllErrors() []error { return m }

// ReadShiftTemplateRequestValidationError is the validation error returned by
// ReadShiftTemplateRequest.Validate if the designated constraints aren't met.
type ReadShiftTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadShiftTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadShiftTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadShiftTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadShiftTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadShiftTemplateRequestValidationError) ErrorName() string {
	return "ReadShiftTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadShiftTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadShiftTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadShiftTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadShiftTemplateRequestValidationError{}

// Validate checks the field values on ReadShiftTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadShiftTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadShiftTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadShiftTemplateResponseMultiError, or nil if none found.
func (m *ReadShiftTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadShiftTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadShiftTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadShiftTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadShiftTemplateResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadShiftTemplateResponseMultiError(errors)
	}

	return nil
}

// ReadShiftTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by ReadShiftTemplateResponse.ValidateAll() if the
// designated constraints aren't met.
type ReadShiftTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadShiftTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadShiftTemplateResponseMultiError) AllErrors() []error { return m }

// ReadShiftTemplateResponseValidationError is the validation error returned by
// ReadShiftTemplateResponse.Validate if the designated constraints aren't met.
type ReadShiftTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadShiftTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadShiftTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadShiftTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadShiftTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadShiftTemplateResponseValidationError) ErrorName() string {
	return "ReadShiftTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadShiftTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadShiftTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadShiftTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadShiftTemplateResponseValidationError{}

// Validate checks the field values on SearchShiftTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchShiftTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchShiftTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchShiftTemplateRequestMultiError, or nil if none found.
func (m *SearchShiftTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchShiftTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Q != nil {
		// no validation rules for Q
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.Size != nil {
		// no validation rules for Size
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if len(errors) > 0 {
		return SearchShiftTemplateRequestMultiError(errors)
	}

	return nil
}

// SearchShiftTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by SearchShiftTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type SearchShiftTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchShiftTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchShiftTemplateRequestMultiError) AllErrors() []error { return m }

// SearchShiftTemplateRequestValidationError is the validation error returned
// by SearchShiftTemplateRequest.Validate if the designated constraints aren't met.
type SearchShiftTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchShiftTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchShiftTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchShiftTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchShiftTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchShiftTemplateRequestValidationError) ErrorName() string {
	return "SearchShiftTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchShiftTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchShiftTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchShiftTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchShiftTemplateRequestValidationError{}

// Validate checks the field values on SearchShiftTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchShiftTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchShiftTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchShiftTemplateResponseMultiError, or nil if none found.
func (m *SearchShiftTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchShiftTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchShiftTemplateResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchShiftTemplateResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchShiftTemplateResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Next

	if len(errors) > 0 {
		return SearchShiftTemplateResponseMultiError(errors)
	}

	return nil
}

// SearchShiftTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by SearchShiftTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchShiftTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchShiftTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchShiftTemplateResponseMultiError) AllErrors() []error { return m }

// SearchShiftTemplateResponseValidationError is the validation error returned
// by SearchShiftTemplateResponse.Validate if the designated constraints
// aren't met.
type SearchShiftTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchShiftTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchShiftTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchShiftTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchShiftTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchShiftTemplateResponseValidationError) ErrorName() string {
	return "SearchShiftTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchShiftTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchShiftTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchShiftTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchShiftTemplateResponseValidationError{}

// Validate checks the field values on UpdateShiftTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShiftTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShiftTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShiftTemplateRequestMultiError, or nil if none found.
func (m *UpdateShiftTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShiftTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShiftTemplateRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShiftTemplateRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShiftTemplateRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateShiftTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateShiftTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateShiftTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateShiftTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShiftTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShiftTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateShiftTemplateRequestValidationError is the validation error returned
// by UpdateShiftTemplateRequest.Validate if the designated constraints aren't met.
type UpdateShiftTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShiftTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShiftTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShiftTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShiftTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShiftTemplateRequestValidationError) ErrorName() string {
	return "UpdateShiftTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShiftTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShiftTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShiftTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShiftTemplateRequestValidationError{}

// Validate checks the field values on UpdateShiftTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShiftTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShiftTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShiftTemplateResponseMultiError, or nil if none found.
func (m *UpdateShiftTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShiftTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShiftTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShiftTemplateResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShiftTemplateResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateShiftTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdateShiftTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateShiftTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateShiftTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShiftTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShiftTemplateResponseMultiError) AllErrors() []error { return m }

// UpdateShiftTemplateResponseValidationError is the validation error returned
// by UpdateShiftTemplateResponse.Validate if the designated constraints
// aren't met.
type UpdateShiftTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShiftTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShiftTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShiftTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShiftTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShiftTemplateResponseValidationError) ErrorName() string {
	return "UpdateShiftTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShiftTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShiftTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShiftTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShiftTemplateResponseValidationError{}

// Validate checks the field values on DeleteShiftTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShiftTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShiftTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShiftTemplateRequestMultiError, or nil if none found.
func (m *DeleteShiftTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShiftTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteShiftTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteShiftTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteShiftTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteShiftTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShiftTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShiftTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteShiftTemplateRequestValidationError is the validation error returned
// by DeleteShiftTemplateRequest.Validate if the designated constraints aren't met.
type DeleteShiftTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShiftTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShiftTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShiftTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShiftTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShiftTemplateRequestValidationError) ErrorName() string {
	return "DeleteShiftTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShiftTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShiftTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShiftTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShiftTemplateRequestValidationError{}

// Validate checks the field values on DeleteShiftTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShiftTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShiftTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShiftTemplateResponseMultiError, or nil if none found.
func (m *DeleteShiftTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShiftTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteShiftTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteShiftTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteShiftTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteShiftTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShiftTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShiftTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteShiftTemplateResponseValidationError is the validation error returned
// by DeleteShiftTemplateResponse.Validate if the designated constraints
// aren't met.
type DeleteShiftTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShiftTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShiftTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShiftTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShiftTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShiftTemplateResponseValidationError) ErrorName() string {
	return "DeleteShiftTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShiftTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShiftTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShiftTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShiftTemplateResponseValidationError{}

// Validate checks the field values on ShiftTemplateTime with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShiftTemplateTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShiftTemplateTime with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShiftTemplateTimeMultiError, or nil if none found.
func (m *ShiftTemplateTime) ValidateAll() error {
	return m.validate(true)
}

func (m *ShiftTemplateTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return ShiftTemplateTimeMultiError(errors)
	}

	return nil
}

// ShiftTemplateTimeMultiError is an error wrapping multiple validation errors
// returned by ShiftTemplateTime.ValidateAll() if the designated constraints
// aren't met.
type ShiftTemplateTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShiftTemplateTimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShiftTemplateTimeMultiError) AllErrors() []error { return m }

// ShiftTemplateTimeValidationError is the validation error returned by
// ShiftTemplateTime.Validate if the designated constraints aren't met.
type ShiftTemplateTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShiftTemplateTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShiftTemplateTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShiftTemplateTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShiftTemplateTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShiftTemplateTimeValidationError) ErrorName() string {
	return "ShiftTemplateTimeValidationError"
}

// Error satisfies the builtin error interface
func (e ShiftTemplateTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShiftTemplateTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShiftTemplateTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShiftTemplateTimeValidationError{}

// Validate checks the field values on ShiftTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShiftTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShiftTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShiftTemplateMultiError, or
// nil if none found.
func (m *ShiftTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *ShiftTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DomainId

	// no validation rules for CreatedAt

	if all {
		switch v := interface{}(m.GetCreatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShiftTemplateValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShiftTemplateValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShiftTemplateValidationError{
				field:  "CreatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShiftTemplateValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShiftTemplateValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShiftTemplateValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	for idx, item := range m.GetTimes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShiftTemplateValidationError{
						field:  fmt.Sprintf("Times[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShiftTemplateValidationError{
						field:  fmt.Sprintf("Times[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShiftTemplateValidationError{
					field:  fmt.Sprintf("Times[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ShiftTemplateMultiError(errors)
	}

	return nil
}

// ShiftTemplateMultiError is an error wrapping multiple validation errors
// returned by ShiftTemplate.ValidateAll() if the designated constraints
// aren't met.
type ShiftTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShiftTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShiftTemplateMultiError) AllErrors() []error { return m }

// ShiftTemplateValidationError is the validation error returned by
// ShiftTemplate.Validate if the designated constraints aren't met.
type ShiftTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShiftTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShiftTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShiftTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShiftTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShiftTemplateValidationError) ErrorName() string { return "ShiftTemplateValidationError" }

// Error satisfies the builtin error interface
func (e ShiftTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShiftTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShiftTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShiftTemplateValidationError{}
