// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: forecast_calculation.proto

package wfm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ForecastCalculationService_CreateForecastCalculation_FullMethodName  = "/wfm.ForecastCalculationService/CreateForecastCalculation"
	ForecastCalculationService_ReadForecastCalculation_FullMethodName    = "/wfm.ForecastCalculationService/ReadForecastCalculation"
	ForecastCalculationService_SearchForecastCalculation_FullMethodName  = "/wfm.ForecastCalculationService/SearchForecastCalculation"
	ForecastCalculationService_UpdateForecastCalculation_FullMethodName  = "/wfm.ForecastCalculationService/UpdateForecastCalculation"
	ForecastCalculationService_DeleteForecastCalculation_FullMethodName  = "/wfm.ForecastCalculationService/DeleteForecastCalculation"
	ForecastCalculationService_ExecuteForecastCalculation_FullMethodName = "/wfm.ForecastCalculationService/ExecuteForecastCalculation"
)

// ForecastCalculationServiceClient is the client API for ForecastCalculationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForecastCalculationServiceClient interface {
	CreateForecastCalculation(ctx context.Context, in *CreateForecastCalculationRequest, opts ...grpc.CallOption) (*CreateForecastCalculationResponse, error)
	ReadForecastCalculation(ctx context.Context, in *ReadForecastCalculationRequest, opts ...grpc.CallOption) (*ReadForecastCalculationResponse, error)
	SearchForecastCalculation(ctx context.Context, in *SearchForecastCalculationRequest, opts ...grpc.CallOption) (*SearchForecastCalculationResponse, error)
	UpdateForecastCalculation(ctx context.Context, in *UpdateForecastCalculationRequest, opts ...grpc.CallOption) (*UpdateForecastCalculationResponse, error)
	DeleteForecastCalculation(ctx context.Context, in *DeleteForecastCalculationRequest, opts ...grpc.CallOption) (*DeleteForecastCalculationResponse, error)
	ExecuteForecastCalculation(ctx context.Context, in *ExecuteForecastCalculationRequest, opts ...grpc.CallOption) (*ExecuteForecastCalculationResponse, error)
}

type forecastCalculationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForecastCalculationServiceClient(cc grpc.ClientConnInterface) ForecastCalculationServiceClient {
	return &forecastCalculationServiceClient{cc}
}

func (c *forecastCalculationServiceClient) CreateForecastCalculation(ctx context.Context, in *CreateForecastCalculationRequest, opts ...grpc.CallOption) (*CreateForecastCalculationResponse, error) {
	out := new(CreateForecastCalculationResponse)
	err := c.cc.Invoke(ctx, ForecastCalculationService_CreateForecastCalculation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastCalculationServiceClient) ReadForecastCalculation(ctx context.Context, in *ReadForecastCalculationRequest, opts ...grpc.CallOption) (*ReadForecastCalculationResponse, error) {
	out := new(ReadForecastCalculationResponse)
	err := c.cc.Invoke(ctx, ForecastCalculationService_ReadForecastCalculation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastCalculationServiceClient) SearchForecastCalculation(ctx context.Context, in *SearchForecastCalculationRequest, opts ...grpc.CallOption) (*SearchForecastCalculationResponse, error) {
	out := new(SearchForecastCalculationResponse)
	err := c.cc.Invoke(ctx, ForecastCalculationService_SearchForecastCalculation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastCalculationServiceClient) UpdateForecastCalculation(ctx context.Context, in *UpdateForecastCalculationRequest, opts ...grpc.CallOption) (*UpdateForecastCalculationResponse, error) {
	out := new(UpdateForecastCalculationResponse)
	err := c.cc.Invoke(ctx, ForecastCalculationService_UpdateForecastCalculation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastCalculationServiceClient) DeleteForecastCalculation(ctx context.Context, in *DeleteForecastCalculationRequest, opts ...grpc.CallOption) (*DeleteForecastCalculationResponse, error) {
	out := new(DeleteForecastCalculationResponse)
	err := c.cc.Invoke(ctx, ForecastCalculationService_DeleteForecastCalculation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastCalculationServiceClient) ExecuteForecastCalculation(ctx context.Context, in *ExecuteForecastCalculationRequest, opts ...grpc.CallOption) (*ExecuteForecastCalculationResponse, error) {
	out := new(ExecuteForecastCalculationResponse)
	err := c.cc.Invoke(ctx, ForecastCalculationService_ExecuteForecastCalculation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForecastCalculationServiceServer is the server API for ForecastCalculationService service.
// All implementations must embed UnimplementedForecastCalculationServiceServer
// for forward compatibility
type ForecastCalculationServiceServer interface {
	CreateForecastCalculation(context.Context, *CreateForecastCalculationRequest) (*CreateForecastCalculationResponse, error)
	ReadForecastCalculation(context.Context, *ReadForecastCalculationRequest) (*ReadForecastCalculationResponse, error)
	SearchForecastCalculation(context.Context, *SearchForecastCalculationRequest) (*SearchForecastCalculationResponse, error)
	UpdateForecastCalculation(context.Context, *UpdateForecastCalculationRequest) (*UpdateForecastCalculationResponse, error)
	DeleteForecastCalculation(context.Context, *DeleteForecastCalculationRequest) (*DeleteForecastCalculationResponse, error)
	ExecuteForecastCalculation(context.Context, *ExecuteForecastCalculationRequest) (*ExecuteForecastCalculationResponse, error)
	mustEmbedUnimplementedForecastCalculationServiceServer()
}

// UnimplementedForecastCalculationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedForecastCalculationServiceServer struct {
}

func (UnimplementedForecastCalculationServiceServer) CreateForecastCalculation(context.Context, *CreateForecastCalculationRequest) (*CreateForecastCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForecastCalculation not implemented")
}
func (UnimplementedForecastCalculationServiceServer) ReadForecastCalculation(context.Context, *ReadForecastCalculationRequest) (*ReadForecastCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadForecastCalculation not implemented")
}
func (UnimplementedForecastCalculationServiceServer) SearchForecastCalculation(context.Context, *SearchForecastCalculationRequest) (*SearchForecastCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForecastCalculation not implemented")
}
func (UnimplementedForecastCalculationServiceServer) UpdateForecastCalculation(context.Context, *UpdateForecastCalculationRequest) (*UpdateForecastCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForecastCalculation not implemented")
}
func (UnimplementedForecastCalculationServiceServer) DeleteForecastCalculation(context.Context, *DeleteForecastCalculationRequest) (*DeleteForecastCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForecastCalculation not implemented")
}
func (UnimplementedForecastCalculationServiceServer) ExecuteForecastCalculation(context.Context, *ExecuteForecastCalculationRequest) (*ExecuteForecastCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteForecastCalculation not implemented")
}
func (UnimplementedForecastCalculationServiceServer) mustEmbedUnimplementedForecastCalculationServiceServer() {
}

// UnsafeForecastCalculationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForecastCalculationServiceServer will
// result in compilation errors.
type UnsafeForecastCalculationServiceServer interface {
	mustEmbedUnimplementedForecastCalculationServiceServer()
}

func RegisterForecastCalculationServiceServer(s grpc.ServiceRegistrar, srv ForecastCalculationServiceServer) {
	s.RegisterService(&ForecastCalculationService_ServiceDesc, srv)
}

func _ForecastCalculationService_CreateForecastCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForecastCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastCalculationServiceServer).CreateForecastCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastCalculationService_CreateForecastCalculation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastCalculationServiceServer).CreateForecastCalculation(ctx, req.(*CreateForecastCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastCalculationService_ReadForecastCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadForecastCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastCalculationServiceServer).ReadForecastCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastCalculationService_ReadForecastCalculation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastCalculationServiceServer).ReadForecastCalculation(ctx, req.(*ReadForecastCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastCalculationService_SearchForecastCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchForecastCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastCalculationServiceServer).SearchForecastCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastCalculationService_SearchForecastCalculation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastCalculationServiceServer).SearchForecastCalculation(ctx, req.(*SearchForecastCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastCalculationService_UpdateForecastCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForecastCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastCalculationServiceServer).UpdateForecastCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastCalculationService_UpdateForecastCalculation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastCalculationServiceServer).UpdateForecastCalculation(ctx, req.(*UpdateForecastCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastCalculationService_DeleteForecastCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForecastCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastCalculationServiceServer).DeleteForecastCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastCalculationService_DeleteForecastCalculation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastCalculationServiceServer).DeleteForecastCalculation(ctx, req.(*DeleteForecastCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastCalculationService_ExecuteForecastCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteForecastCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastCalculationServiceServer).ExecuteForecastCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastCalculationService_ExecuteForecastCalculation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastCalculationServiceServer).ExecuteForecastCalculation(ctx, req.(*ExecuteForecastCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForecastCalculationService_ServiceDesc is the grpc.ServiceDesc for ForecastCalculationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForecastCalculationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wfm.ForecastCalculationService",
	HandlerType: (*ForecastCalculationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateForecastCalculation",
			Handler:    _ForecastCalculationService_CreateForecastCalculation_Handler,
		},
		{
			MethodName: "ReadForecastCalculation",
			Handler:    _ForecastCalculationService_ReadForecastCalculation_Handler,
		},
		{
			MethodName: "SearchForecastCalculation",
			Handler:    _ForecastCalculationService_SearchForecastCalculation_Handler,
		},
		{
			MethodName: "UpdateForecastCalculation",
			Handler:    _ForecastCalculationService_UpdateForecastCalculation_Handler,
		},
		{
			MethodName: "DeleteForecastCalculation",
			Handler:    _ForecastCalculationService_DeleteForecastCalculation_Handler,
		},
		{
			MethodName: "ExecuteForecastCalculation",
			Handler:    _ForecastCalculationService_ExecuteForecastCalculation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forecast_calculation.proto",
}
