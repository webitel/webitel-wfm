// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: agent_absence.proto

package wfm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentAbsenceService_CreateAgentAbsence_FullMethodName   = "/wfm.AgentAbsenceService/CreateAgentAbsence"
	AgentAbsenceService_ReadAgentAbsence_FullMethodName     = "/wfm.AgentAbsenceService/ReadAgentAbsence"
	AgentAbsenceService_SearchAgentAbsence_FullMethodName   = "/wfm.AgentAbsenceService/SearchAgentAbsence"
	AgentAbsenceService_UpdateAgentAbsence_FullMethodName   = "/wfm.AgentAbsenceService/UpdateAgentAbsence"
	AgentAbsenceService_DeleteAgentAbsence_FullMethodName   = "/wfm.AgentAbsenceService/DeleteAgentAbsence"
	AgentAbsenceService_CreateAgentsAbsences_FullMethodName = "/wfm.AgentAbsenceService/CreateAgentsAbsences"
	AgentAbsenceService_SearchAgentsAbsences_FullMethodName = "/wfm.AgentAbsenceService/SearchAgentsAbsences"
)

// AgentAbsenceServiceClient is the client API for AgentAbsenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentAbsenceServiceClient interface {
	// Creates one-day-absence for one agent.
	CreateAgentAbsence(ctx context.Context, in *CreateAgentAbsenceRequest, opts ...grpc.CallOption) (*CreateAgentAbsenceResponse, error)
	// Reads one absence per agent by its id.
	ReadAgentAbsence(ctx context.Context, in *ReadAgentAbsenceRequest, opts ...grpc.CallOption) (*ReadAgentAbsenceResponse, error)
	// Searches agent absences by filters.
	SearchAgentAbsence(ctx context.Context, in *SearchAgentAbsenceRequest, opts ...grpc.CallOption) (*SearchAgentAbsenceResponse, error)
	// Updates agent concrete absence by its id.
	UpdateAgentAbsence(ctx context.Context, in *UpdateAgentAbsenceRequest, opts ...grpc.CallOption) (*UpdateAgentAbsenceResponse, error)
	// Deletes agent concrete absence by its id.
	DeleteAgentAbsence(ctx context.Context, in *DeleteAgentAbsenceRequest, opts ...grpc.CallOption) (*DeleteAgentAbsenceResponse, error)
	// Creates absences for multiple specified agents.
	CreateAgentsAbsences(ctx context.Context, in *CreateAgentsAbsencesRequest, opts ...grpc.CallOption) (*CreateAgentsAbsencesResponse, error)
	// Searches absences by filters.
	SearchAgentsAbsences(ctx context.Context, in *SearchAgentsAbsencesRequest, opts ...grpc.CallOption) (*SearchAgentsAbsencesResponse, error)
}

type agentAbsenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentAbsenceServiceClient(cc grpc.ClientConnInterface) AgentAbsenceServiceClient {
	return &agentAbsenceServiceClient{cc}
}

func (c *agentAbsenceServiceClient) CreateAgentAbsence(ctx context.Context, in *CreateAgentAbsenceRequest, opts ...grpc.CallOption) (*CreateAgentAbsenceResponse, error) {
	out := new(CreateAgentAbsenceResponse)
	err := c.cc.Invoke(ctx, AgentAbsenceService_CreateAgentAbsence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAbsenceServiceClient) ReadAgentAbsence(ctx context.Context, in *ReadAgentAbsenceRequest, opts ...grpc.CallOption) (*ReadAgentAbsenceResponse, error) {
	out := new(ReadAgentAbsenceResponse)
	err := c.cc.Invoke(ctx, AgentAbsenceService_ReadAgentAbsence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAbsenceServiceClient) SearchAgentAbsence(ctx context.Context, in *SearchAgentAbsenceRequest, opts ...grpc.CallOption) (*SearchAgentAbsenceResponse, error) {
	out := new(SearchAgentAbsenceResponse)
	err := c.cc.Invoke(ctx, AgentAbsenceService_SearchAgentAbsence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAbsenceServiceClient) UpdateAgentAbsence(ctx context.Context, in *UpdateAgentAbsenceRequest, opts ...grpc.CallOption) (*UpdateAgentAbsenceResponse, error) {
	out := new(UpdateAgentAbsenceResponse)
	err := c.cc.Invoke(ctx, AgentAbsenceService_UpdateAgentAbsence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAbsenceServiceClient) DeleteAgentAbsence(ctx context.Context, in *DeleteAgentAbsenceRequest, opts ...grpc.CallOption) (*DeleteAgentAbsenceResponse, error) {
	out := new(DeleteAgentAbsenceResponse)
	err := c.cc.Invoke(ctx, AgentAbsenceService_DeleteAgentAbsence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAbsenceServiceClient) CreateAgentsAbsences(ctx context.Context, in *CreateAgentsAbsencesRequest, opts ...grpc.CallOption) (*CreateAgentsAbsencesResponse, error) {
	out := new(CreateAgentsAbsencesResponse)
	err := c.cc.Invoke(ctx, AgentAbsenceService_CreateAgentsAbsences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAbsenceServiceClient) SearchAgentsAbsences(ctx context.Context, in *SearchAgentsAbsencesRequest, opts ...grpc.CallOption) (*SearchAgentsAbsencesResponse, error) {
	out := new(SearchAgentsAbsencesResponse)
	err := c.cc.Invoke(ctx, AgentAbsenceService_SearchAgentsAbsences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentAbsenceServiceServer is the server API for AgentAbsenceService service.
// All implementations must embed UnimplementedAgentAbsenceServiceServer
// for forward compatibility
type AgentAbsenceServiceServer interface {
	// Creates one-day-absence for one agent.
	CreateAgentAbsence(context.Context, *CreateAgentAbsenceRequest) (*CreateAgentAbsenceResponse, error)
	// Reads one absence per agent by its id.
	ReadAgentAbsence(context.Context, *ReadAgentAbsenceRequest) (*ReadAgentAbsenceResponse, error)
	// Searches agent absences by filters.
	SearchAgentAbsence(context.Context, *SearchAgentAbsenceRequest) (*SearchAgentAbsenceResponse, error)
	// Updates agent concrete absence by its id.
	UpdateAgentAbsence(context.Context, *UpdateAgentAbsenceRequest) (*UpdateAgentAbsenceResponse, error)
	// Deletes agent concrete absence by its id.
	DeleteAgentAbsence(context.Context, *DeleteAgentAbsenceRequest) (*DeleteAgentAbsenceResponse, error)
	// Creates absences for multiple specified agents.
	CreateAgentsAbsences(context.Context, *CreateAgentsAbsencesRequest) (*CreateAgentsAbsencesResponse, error)
	// Searches absences by filters.
	SearchAgentsAbsences(context.Context, *SearchAgentsAbsencesRequest) (*SearchAgentsAbsencesResponse, error)
	mustEmbedUnimplementedAgentAbsenceServiceServer()
}

// UnimplementedAgentAbsenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentAbsenceServiceServer struct {
}

func (UnimplementedAgentAbsenceServiceServer) CreateAgentAbsence(context.Context, *CreateAgentAbsenceRequest) (*CreateAgentAbsenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentAbsence not implemented")
}
func (UnimplementedAgentAbsenceServiceServer) ReadAgentAbsence(context.Context, *ReadAgentAbsenceRequest) (*ReadAgentAbsenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAgentAbsence not implemented")
}
func (UnimplementedAgentAbsenceServiceServer) SearchAgentAbsence(context.Context, *SearchAgentAbsenceRequest) (*SearchAgentAbsenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgentAbsence not implemented")
}
func (UnimplementedAgentAbsenceServiceServer) UpdateAgentAbsence(context.Context, *UpdateAgentAbsenceRequest) (*UpdateAgentAbsenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentAbsence not implemented")
}
func (UnimplementedAgentAbsenceServiceServer) DeleteAgentAbsence(context.Context, *DeleteAgentAbsenceRequest) (*DeleteAgentAbsenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentAbsence not implemented")
}
func (UnimplementedAgentAbsenceServiceServer) CreateAgentsAbsences(context.Context, *CreateAgentsAbsencesRequest) (*CreateAgentsAbsencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentsAbsences not implemented")
}
func (UnimplementedAgentAbsenceServiceServer) SearchAgentsAbsences(context.Context, *SearchAgentsAbsencesRequest) (*SearchAgentsAbsencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgentsAbsences not implemented")
}
func (UnimplementedAgentAbsenceServiceServer) mustEmbedUnimplementedAgentAbsenceServiceServer() {}

// UnsafeAgentAbsenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentAbsenceServiceServer will
// result in compilation errors.
type UnsafeAgentAbsenceServiceServer interface {
	mustEmbedUnimplementedAgentAbsenceServiceServer()
}

func RegisterAgentAbsenceServiceServer(s grpc.ServiceRegistrar, srv AgentAbsenceServiceServer) {
	s.RegisterService(&AgentAbsenceService_ServiceDesc, srv)
}

func _AgentAbsenceService_CreateAgentAbsence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentAbsenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAbsenceServiceServer).CreateAgentAbsence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAbsenceService_CreateAgentAbsence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAbsenceServiceServer).CreateAgentAbsence(ctx, req.(*CreateAgentAbsenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAbsenceService_ReadAgentAbsence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAgentAbsenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAbsenceServiceServer).ReadAgentAbsence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAbsenceService_ReadAgentAbsence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAbsenceServiceServer).ReadAgentAbsence(ctx, req.(*ReadAgentAbsenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAbsenceService_SearchAgentAbsence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentAbsenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAbsenceServiceServer).SearchAgentAbsence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAbsenceService_SearchAgentAbsence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAbsenceServiceServer).SearchAgentAbsence(ctx, req.(*SearchAgentAbsenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAbsenceService_UpdateAgentAbsence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentAbsenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAbsenceServiceServer).UpdateAgentAbsence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAbsenceService_UpdateAgentAbsence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAbsenceServiceServer).UpdateAgentAbsence(ctx, req.(*UpdateAgentAbsenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAbsenceService_DeleteAgentAbsence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentAbsenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAbsenceServiceServer).DeleteAgentAbsence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAbsenceService_DeleteAgentAbsence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAbsenceServiceServer).DeleteAgentAbsence(ctx, req.(*DeleteAgentAbsenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAbsenceService_CreateAgentsAbsences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentsAbsencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAbsenceServiceServer).CreateAgentsAbsences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAbsenceService_CreateAgentsAbsences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAbsenceServiceServer).CreateAgentsAbsences(ctx, req.(*CreateAgentsAbsencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAbsenceService_SearchAgentsAbsences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentsAbsencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAbsenceServiceServer).SearchAgentsAbsences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAbsenceService_SearchAgentsAbsences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAbsenceServiceServer).SearchAgentsAbsences(ctx, req.(*SearchAgentsAbsencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentAbsenceService_ServiceDesc is the grpc.ServiceDesc for AgentAbsenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentAbsenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wfm.AgentAbsenceService",
	HandlerType: (*AgentAbsenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAgentAbsence",
			Handler:    _AgentAbsenceService_CreateAgentAbsence_Handler,
		},
		{
			MethodName: "ReadAgentAbsence",
			Handler:    _AgentAbsenceService_ReadAgentAbsence_Handler,
		},
		{
			MethodName: "SearchAgentAbsence",
			Handler:    _AgentAbsenceService_SearchAgentAbsence_Handler,
		},
		{
			MethodName: "UpdateAgentAbsence",
			Handler:    _AgentAbsenceService_UpdateAgentAbsence_Handler,
		},
		{
			MethodName: "DeleteAgentAbsence",
			Handler:    _AgentAbsenceService_DeleteAgentAbsence_Handler,
		},
		{
			MethodName: "CreateAgentsAbsences",
			Handler:    _AgentAbsenceService_CreateAgentsAbsences_Handler,
		},
		{
			MethodName: "SearchAgentsAbsences",
			Handler:    _AgentAbsenceService_SearchAgentsAbsences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_absence.proto",
}
