export: true

options:
  max-time: 30
  docker: false

image: golang:1.24.2-alpine

definitions:
  caches:
    # Caches downloaded modules via go mod download, etc.. in $GOMODCACHE ($GOPATH/pkg/mod).
    go-mod:
      path: /go/pkg/mod
      key:
        files: [ go.sum ]

    # Reuse in future go install / go tool runs.
    go-tools-build:
      path: ~/.cache/go-build
      key:
        files: [ go.sum ]

    # Reuse in future application builds.
    go-app-build:
      path: ~/.cache/go-build
      key:
        files: [ go.sum ]

    golangci-lint:
      path: ~/.cache/golangci-lint
      key:
        files: [ go.sum ]

  steps:
    - step: &prepare-version-step
        name: Extract version
        image: alpine:latest
        script:
          - echo "WEBITEL_VERSION=$(date +v%y.%-m)-nightly.$BITBUCKET_BUILD_NUMBER+sha.$BITBUCKET_COMMIT" >> $BITBUCKET_PIPELINES_VARIABLES_PATH
          - echo "WEBITEL_DEB_COMPONENT=nightly" >> $BITBUCKET_PIPELINES_VARIABLES_PATH
        output-variables: [ WEBITEL_VERSION, WEBITEL_DEB_COMPONENT ]

    - step: &prepare-dependencies-step
        name: Download dependencies
        caches: [ go-mod ]
        script:
          - go mod download

    - step: &prepare-code-step
        name: Generate code
        caches: [ go-mod, go-tools-build ]
        script:
          - apk add --no-cache git # Needed for buf to clone protos.
          - go generate ./...
        artifacts:
          paths:
            - gen/go/**
            - cmd/wire_gen.go

    - step: &test-compile-step
        name: Compile application
        size: 2x
        image: goreleaser/goreleaser:v2.8.2
        caches: [ go-mod, go-app-build ]
        # Variables under the key are not interpolated (no expansion of $VAR_NAME).
        # They are treated literally, not dynamically resolved.
        # variables:
        # GORELEASER_CURRENT_TAG: $WEBITEL_VERSION
        script:
          - export GORELEASER_CURRENT_TAG=$WEBITEL_VERSION
          - goreleaser release --clean --skip publish --skip validate
        artifacts:
          download: true
          paths:
            - dist/webitel-wfm-*.*

    - step: &test-linting-step
        name: Lint code
        size: 2x
        image: golangci/golangci-lint:v1.64.8-alpine
        caches: [ go-mod, golangci-lint ]
        variables:
          GOLANGCI_LINT_CACHE: ~/.cache/golangci-lint
        script:
          - golangci-lint run

    - step: &test-unit-step
        name: Unit testing
        caches: [ go-mod, go-app-build ]
        script:
          - go test -short -v ./... > test.log
          - grep --color=never -e '--- PASS:' -e '--- FAIL:' test.log | sed 's/[:()]//g' | awk '{print $2,$3,$4}' | sort -t' ' -nk3 -r | awk '{sum += $3; print $1,$2,$3,sum"s"}'

    - step: &deploy-development-step
        name: Deploy (development)
        deployment: development
        script:
          - echo "Deployed!"

    - step: &deploy-testing-step
        name: Deploy (testing)
        trigger: manual
        deployment: testing
        script:
          - echo "Deployed!"

    - step: &deploy-staging-step
        name: Deploy (staging)
        trigger: manual
        deployment: staging
        script:
          - echo "Deployed!"

    - step: &publish-deb-step
        name: Publish .deb package
        trigger: manual
        deployment: repository
        image: ruby:3.3.8-alpine
        script:
          - gem install deb-s3
          - >
            deb-s3 upload "dist/webitel-wfm-*.deb" --visibility nil --arch amd64 \
              --component "$WEBITEL_DEB_COMPONENT" \
              --codename "$DEB_CODENAME" \
              --access-key-id "$DEB_AWS_ACCESS_KEY_ID" \
              --secret-access-key "$DEB_AWS_SECRET_ACCESS_KEY" \
              --s3-region "$DEB_AWS_DEFAULT_REGION" \
              --bucket "$DEB_AWS_BUCKET_NAME"

pipelines:
  default:
    - stage:
        name: Prepare
        steps:
          - step: *prepare-version-step
          - step: *prepare-dependencies-step
          - step: *prepare-code-step

    - parallel:
        steps:
          - step: *test-compile-step
          - step: *test-linting-step
          - step: *test-unit-step

  branches:
    # Code from development branch deploys to development
    # and testing environments with manual approves.
    main:
      - stage:
          name: Prepare
          steps:
            - step: *prepare-version-step
            - step: *prepare-dependencies-step
            - step: *prepare-code-step

      - parallel:
          steps:
            - step: *test-compile-step
            - step: *test-linting-step
            - step: *test-unit-step

      - step: *deploy-development-step
      - step: *deploy-testing-step
      - step: *publish-deb-step

    # Release branches goes to staging environments.
    v*.*:
      - stage:
          name: Prepare
          steps:
            - step:
                <<: *prepare-version-step
                script:
                  - echo "WEBITEL_VERSION=$BITBUCKET_BRANCH-$BITBUCKET_BUILD_NUMBER+sha.$BITBUCKET_COMMIT" >> $BITBUCKET_PIPELINES_VARIABLES_PATH
                  - echo "WEBITEL_DEB_COMPONENT=$BITBUCKET_BRANCH-releases" >> $BITBUCKET_PIPELINES_VARIABLES_PATH

            - step: *prepare-dependencies-step
            - step: *prepare-code-step

      - parallel:
          steps:
            - step: *test-compile-step
            - step: *test-linting-step
            - step: *test-unit-step

      - step: *deploy-staging-step
      - step: *publish-deb-step
