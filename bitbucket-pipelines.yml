export: true

options:
  max-time: 30
  docker: false

definitions:
  runners:
    - self-hosted: &selfhosted-runner
        runs-on:
          - 'self.hosted'
          - 'linux.shell'

  changesets:
    - includePaths: &code-backstage-changesets
      - ".gitattributes"
      - ".golangci.yaml"
      - ".goreleaser.yml"
      - "buf.gen.yaml"
      - "bitbucket-pipelines.yml"
      - "Makefile*"
      - "{ci,dockerfiles,packaging,scripts,tests}/**/*"
      - "**/*.go"
      - "go.*"

    - includePaths: &docs-changesets
      - ".vale.ini"
      - ".markdownlint.yml"
      - "docs/**/*"
      - "scripts/lint-docs"

  conditions:
    - condition: &code-backstage-condition
        changesets:
          includePaths: *code-backstage-changesets

  on-fails:
    - on-fail: &fail-strategy
        strategy: fail

    - on-fail: &ignore-strategy
        strategy: fail

  clones:
    - disable-clone: &disable-clone
        clone:
          enabled: false

    - full-clone: &full-clone
        clone:
          enabled: true
          depth: full

  steps:
    - step: &prepare-version-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        <<: *disable-clone
        name: Extract version
        output-variables: [ "WEBITEL_VERSION", "WEBITEL_DEB_COMPONENT" ]
        script:
          - >
            helper parse-version --vars-path $BITBUCKET_PIPELINES_VARIABLES_PATH \
              --version-env-name "WEBITEL_VERSION" \
              --component-env-name "WEBITEL_DEB_COMPONENT" \
              --development-branch "main" \
              --trigger-branch "$BITBUCKET_BRANCH" \
              --build-number "$BITBUCKET_BUILD_NUMBER"        

    - step: &prepare-dependencies-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Generate code
        script:
          - go mod download
          - go generate ./...
        artifacts:
          paths:
            - gen/go/**
            - cmd/wire_gen.go

    - step: &test-compile-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        <<: *fail-strategy
        name: Compile application
        script:
          - GORELEASER_CURRENT_TAG=$WEBITEL_VERSION goreleaser release --clean --skip publish --skip validate
        artifacts:
          download: true
          paths:
            - dist/webitel-wfm-*.*

    - step: &test-linting-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        <<: *ignore-strategy
        name: Lint code
        script:
          - golangci-lint run # TODO: upload reports to Bitbucket; --out-format=checkstyle > checkstyle-result.xml

    - step: &test-unit-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        <<: *ignore-strategy
        name: Unit testing
        script:
          - mkdir -p test-reports
          - go test -short -v 2>&1 ./... | go run github.com/jstemmer/go-junit-report/v2@v2.1.0 -set-exit-code > test-reports/junit.xml

    - step: &test-gitleaks-step
        <<: *selfhosted-runner
        <<: *fail-strategy
        name: Secret scanner
        script:
          - mkdir -p test-reports
          - gitleaks git --report-format junit --report-path "test-reports/gitleaks.xml" # TODO: upload reports to Bitbucket

    - step: &deploy-development-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        <<: *disable-clone
        name: Deploy (development)
        deployment: development
        script:
          - > 
            helper deploy --user $DEPLOYMENTS_USER \
              --host $DEV_HOST \
              --key ~/.ssh/$DEPLOYMENTS_USER \
              --package "webitel-wfm-*.deb" \
              --source-dir "$BITBUCKET_CLONE_DIR/dist" \
              --remote-dir "/home/$DEPLOYMENTS_USER/dist/"

    - step: &deploy-testing-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        <<: *disable-clone
        name: Deploy (testing)
        trigger: manual
        deployment: testing
        script:
          - >
            helper deploy --user $DEPLOYMENTS_USER \
              --host $TEST_HOST \
              --key ~/.ssh/$DEPLOYMENTS_USER \
              --package "webitel-wfm-*.deb" \
              --source-dir "$BITBUCKET_CLONE_DIR/dist" \
              --remote-dir "/home/$DEPLOYMENTS_USER/dist/"

    - step: &deploy-staging-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        <<: *disable-clone
        name: Deploy (staging)
        trigger: manual
        deployment: staging
        script:
          - >
            scp -i ~/.ssh/$DEPLOYMENTS_USER -o StrictHostKeychecking=no \
              -rp dist/webitel-wfm-*.deb $DEPLOYMENTS_USER@$STAGE_HOST:~/dist/
          - >
            ssh -i ~/.ssh/$DEPLOYMENTS_USER -o StrictHostKeychecking=no \
              $DEPLOYMENTS_USER@$STAGE_HOST "sudo dpkg -i dist/webitel-wfm-*.deb && rm -f dist/webitel-wfm-*.deb"

    - step: &publish-deb-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        <<: *disable-clone
        name: Publish .deb package
        trigger: manual
        deployment: acceptance
        script:
          - mkdir -p ~/.gnupg
          - chmod 700 ~/.gnupg
          - echo "use-agent" > ~/.gnupg/gpg.conf
          - echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
          - echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

          # Start gpg-agent and ensure environment is loaded
          - gpgconf --kill gpg-agent || true
          - gpgconf --launch gpg-agent
          - export GPG_TTY=$(tty)
          - export GPG_AGENT_INFO=$(gpgconf --list-dirs agent-info-socket)
          - echo "$REPO_SIGNING_KEY" | base64 -d | gpg --batch --import

          # Get keygrip (required for gpg-preset-passphrase)
          - export KEYGRIP=$(gpg --with-keygrip --list-secret-keys | awk '/Keygrip/ {print $3; exit}')

          # Preset the passphrase (only stored in memory)
          - echo "$REPO_SIGNING_KEY_PASSPHRASE" | base64 -d | /usr/lib/gnupg2/gpg-preset-passphrase --preset "$KEYGRIP"
          - >
            deb-s3 upload "dist/webitel-wfm-*.deb" --visibility nil --arch amd64 \
              --component "$WEBITEL_DEB_COMPONENT" \
              --codename "$DEB_CODENAME" \
              --sign "${REPO_SIGNING_KEY_ID}" \
              --gpg-options "--pinentry-mode loopback" \
              --access-key-id "$DEB_AWS_ACCESS_KEY_ID" \
              --secret-access-key "$DEB_AWS_SECRET_ACCESS_KEY" \
              --s3-region "$DEB_AWS_DEFAULT_REGION" \
              --bucket "$DEB_AWS_BUCKET_NAME"

    - parallel: &prepare-parallel
        steps:
          - step: *prepare-version-step
          - step: *prepare-dependencies-step

    - parallel: &test-parallel
        steps:
          - step: *test-compile-step
          - step: *test-linting-step
          - step: *test-unit-step
          - step: *test-gitleaks-step

pipelines:
  default:
    - parallel: *prepare-parallel
    - parallel: *test-parallel

  branches:
    # Code from development branch deploys to development
    # and testing environments with manual approves.
    main:
      - parallel: *prepare-parallel
      - parallel: *test-parallel
      - step: *deploy-development-step
      - step: *deploy-testing-step
      - step: *publish-deb-step

    # Older release branches uploads to deb repository only.
    v*.*:
      - parallel: *prepare-parallel
      - parallel: *test-parallel
      - step:
          <<: *publish-deb-step
          deployment: releases
          trigger: automatic

    # Release branches goes to staging environments.
    # As we should not correctly determine which release are latest,
    # and we have no possibility to skip step - the latest release is separated.
    # Change this on future releases.
    v25.04:
      - step: # FIXME: runner clones only current branch even if depth: full
          <<: *selfhosted-runner
          <<: *code-backstage-condition
          <<: *full-clone
          name: Check latest release
          script:
            - >
              helper check-branch --branch "$BITBUCKET_BRANCH" \
                --repo-path "$BITBUCKET_CLONE_DIR"

      - parallel: *prepare-parallel
      - parallel: *test-parallel
      - step: *deploy-staging-step
      - step:
          <<: *publish-deb-step
          deployment: releases
