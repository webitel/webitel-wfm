export: true

options:
  max-time: 30
  docker: false

definitions:
  runners:
    - self-hosted: &selfhosted-runner
        runs-on:
          - 'self.hosted'
          - 'linux.shell'

  changesets:
    - includePaths: &code-backstage-changesets
      - ".gitattributes"
      - ".golangci.yaml"
      - ".goreleaser.yml"
      - "buf.gen.yaml"
      - "bitbucket-pipelines.yml"
      - "Makefile*"
      - "{ci,dockerfiles,packaging,scripts,tests}/**/*"
      - "**/*.go"
      - "go.*"

    - includePaths: &docs-changesets
      - ".vale.ini"
      - ".markdownlint.yml"
      - "docs/**/*"
      - "scripts/lint-docs"

  conditions:
    - condition: &code-backstage-condition
        changesets:
          includePaths: *code-backstage-changesets

  steps:
    - step: &prepare-version-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Extract version
        script:
          - echo "WEBITEL_VERSION=$(date +v%y.%-m)-dev.$BITBUCKET_BUILD_NUMBER" >> $BITBUCKET_PIPELINES_VARIABLES_PATH
          - echo "WEBITEL_DEB_COMPONENT=dev" >> $BITBUCKET_PIPELINES_VARIABLES_PATH
        output-variables: [ WEBITEL_VERSION, WEBITEL_DEB_COMPONENT ]

    - step: &prepare-dependencies-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Generate code
        script:
          - go mod download
          - go generate ./...
        artifacts:
          paths:
            - gen/go/**
            - cmd/wire_gen.go

    - step: &test-compile-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Compile application
        on-fail: { strategy: fail }
        script:
          - GORELEASER_CURRENT_TAG=$WEBITEL_VERSION goreleaser release --clean --skip publish --skip validate
        artifacts:
          download: true
          paths:
            - dist/webitel-wfm-*.*

    - step: &test-linting-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Lint code
        on-fail: { strategy: ignore }
        variables:
          GOLANGCI_LINT_CACHE: ~/.cache/golangci-lint
        script:
          - golangci-lint run # TODO: upload reports to Bitbucket; --out-format=checkstyle > checkstyle-result.xml

    - step: &test-unit-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Unit testing
        on-fail: { strategy: ignore }
        script:
          - mkdir -p test-reports
          - go test -short -v 2>&1 ./... | go run github.com/jstemmer/go-junit-report/v2@v2.1.0 -set-exit-code > test-reports/junit.xml

    - step: &test-gitleaks-step
        <<: *selfhosted-runner
        name: Secret scanner
        on-fail: { strategy: fail }
        script:
          - gitleaks git --report-format junit --report-path "test-reports/gitleaks.xml"

    - step: &deploy-development-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Deploy (development)
        deployment: development
        script:
          - echo "Deployed!"
#          - pipe: atlassian/scp-deploy:1.5.2
#            variables:
#              SERVER: $DEV_HOST
#              USER: $DEPLOYMENTS_USER
#              SSH_KEY: $DEPLOYMENTS_SSH_KEY
#              EXTRA_ARGS: -o StrictHostKeychecking=no
#              REMOTE_PATH: ~/dist/
#              LOCAL_PATH: dist/webitel-wfm-*.deb
#
#          - pipe: atlassian/ssh-run:0.8.1
#            variables:
#              SERVER: $DEV_HOST
#              SSH_USER: $DEPLOYMENTS_USER
#              SSH_KEY: $DEPLOYMENTS_SSH_KEY
#              COMMAND: sudo dpkg -i dist/webitel-wfm-*.deb; rm -f dist/webitel-wfm-*.deb

    - step: &deploy-testing-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Deploy (testing)
        trigger: manual
        deployment: testing
        script:
          - echo "Deployed!"
#          - pipe: atlassian/scp-deploy:1.5.2
#            variables:
#              SERVER: $TEST_HOST
#              USER: $DEPLOYMENTS_USER
#              SSH_KEY: $DEPLOYMENTS_SSH_KEY
#              EXTRA_ARGS: -o StrictHostKeychecking=no
#              REMOTE_PATH: ~/dist/
#              LOCAL_PATH: dist/webitel-wfm-*.deb
#
#          - pipe: atlassian/ssh-run:0.8.1
#            variables:
#              SERVER: $TEST_HOST
#              SSH_USER: $DEPLOYMENTS_USER
#              SSH_KEY: $DEPLOYMENTS_SSH_KEY
#              COMMAND: sudo dpkg -i dist/webitel-wfm-*.deb; rm -f dist/webitel-wfm-*.deb

    - step: &deploy-staging-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Deploy (staging)
        trigger: manual
        deployment: staging
        script:
          - echo "Deployed!"
#          - pipe: atlassian/scp-deploy:1.5.2
#            variables:
#              SERVER: $STAGE_HOST
#              USER: $DEPLOYMENTS_USER
#              SSH_KEY: $DEPLOYMENTS_SSH_KEY
#              EXTRA_ARGS: -o StrictHostKeychecking=no
#              REMOTE_PATH: ~/dist/
#              LOCAL_PATH: dist/webitel-wfm-*.deb
#
#          - pipe: atlassian/ssh-run:0.8.1
#            variables:
#              SERVER: $STAGE_HOST
#              SSH_USER: $DEPLOYMENTS_USER
#              SSH_KEY: $DEPLOYMENTS_SSH_KEY
#              COMMAND: sudo dpkg -i dist/webitel-wfm-*.deb; rm -f dist/webitel-wfm-*.deb

    - step: &publish-deb-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Publish .deb package
        trigger: manual
        deployment: acceptance
        script:
          - >
            deb-s3 upload "dist/webitel-wfm-*.deb" --visibility nil --arch amd64 \
              --component "$WEBITEL_DEB_COMPONENT" \
              --codename "$DEB_CODENAME" \
              --access-key-id "$DEB_AWS_ACCESS_KEY_ID" \
              --secret-access-key "$DEB_AWS_SECRET_ACCESS_KEY" \
              --s3-region "$DEB_AWS_DEFAULT_REGION" \
              --bucket "$DEB_AWS_BUCKET_NAME"

    - step: &upload-deb-step
        <<: *selfhosted-runner
        <<: *code-backstage-condition
        name: Upload to Downloads
        trigger: manual
        script:
          - echo "Deployed!"
#          - pipe: atlassian/bitbucket-upload-file:0.7.4
#            variables:
#              BITBUCKET_USERNAME: $BITBUCKET_USERNAME
#              BITBUCKET_APP_PASSWORD: $BITBUCKET_APP_PASSWORD
#              FILENAME: dist/webitel-wfm-*.deb

    - parallel: &test-parallel
        steps:
          - step: *test-compile-step
          - step: *test-linting-step
          - step: *test-unit-step
          - step: *test-gitleaks-step

pipelines:
  default:
    - stage:
        <<: *code-backstage-condition
        name: Prepare
        steps:
          - step: *prepare-version-step
          - step: *prepare-dependencies-step

    - parallel: *test-parallel

  branches:
    # Code from development branch deploys to development
    # and testing environments with manual approves.
    main:
      - stage:
          <<: *code-backstage-condition
          name: Prepare
          steps:
            - step: *prepare-version-step
            - step: *prepare-dependencies-step

      - parallel: *test-parallel
      - step: *deploy-development-step
      - step: *deploy-testing-step
      - step: *publish-deb-step

    # Release branches goes to staging environments.
    v*.*:
      - stage:
          <<: *code-backstage-condition
          name: Prepare
          steps:
            - step:
                <<: *prepare-version-step
                script:
                  - echo "WEBITEL_VERSION=$BITBUCKET_BRANCH-$BITBUCKET_BUILD_NUMBER" >> $BITBUCKET_PIPELINES_VARIABLES_PATH
                  - echo "WEBITEL_DEB_COMPONENT=$BITBUCKET_BRANCH-releases" >> $BITBUCKET_PIPELINES_VARIABLES_PATH

            - step: *prepare-dependencies-step

      - parallel: *test-parallel
      - step: *deploy-staging-step
      - parallel:
          steps:
            - step: *publish-deb-step
            - step: *upload-deb-step
